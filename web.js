(()=>{"use strict";var n={d:(t,i)=>{for(var e in i)n.o(i,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:i[e]})},o:(n,t)=>Object.prototype.hasOwnProperty.call(n,t)};n.d({},{o:()=>o});let t="https://tejassrinivasan.pythonanywhere.com/",i=null;function e(n,t,e,o,a){i&&(clearInterval(i),i=null),e.forEach((n=>n.setAttribute("disabled","true")));let l=document.createElement("div");l.id=`timer_${t.id}`,l.style.fontWeight="bold",l.style.marginTop="10px",t.appendChild(l);let r=n;l.textContent=a+` You can make your selection in ${r} second(s).`,i=setInterval((()=>{r--,r>=0?l.textContent=a+` You can make your selection in ${r} second(s).`:(null!==i&&(clearInterval(i),i=null),i=null,t.removeChild(l),e.forEach((n=>n.removeAttribute("disabled"))),o&&o())}),1e3)}var o=!1,a=[];let l,r,s,_,c,d=-1,u=null,p=-1,f=-1,g=-1,v=-1,b=0,h=5,m=-1,x=1,y=0,w=0;var A={},I={};const T=[document.getElementById("button_initial_decision_option1"),document.getElementById("button_initial_decision_option2"),document.getElementById("button_initial_decision_option3"),document.getElementById("button_initial_decision_option4")],k=[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2"),document.getElementById("button_final_decision_option3"),document.getElementById("button_final_decision_option4")],E=document.getElementById("initial_user_decision_div");function N(n,t){if(!n)throw t||"Assertion failed"}function B(n){y+=n,0==y?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),y>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==y&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),D()),$("#main_box_instructions").children(":not(input)").each(((n,t)=>{$(t).hide()})),$(`#instructions_${y}`).show()}function O(n){_=Date.now(),p=n,N(1==n||2==n||3==n||4==n,"Invalid option!"),$(`#button_initial_decision_option${n}`).attr("activedecision","true");for(let t=1;t<=4;t++)t!=n&&$(`#button_initial_decision_option${t}`).removeAttr("activedecision"),$(`#button_initial_decision_option${t}`).attr("disabled","true");console.log("User's initial decision: Option ",n),$("#initial_user_confidence_div").show(),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function S(n){r=Date.now(),g=n,N(1==n||2==n||3==n,"Invalid option!");for(let t=1;t<=3;t++)t!=n&&$(`#button_initial_confidence_option${t}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${t}`).attr("disabled","true");$(`#button_initial_confidence_option${n}`).attr("activedecision","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_decision_option3").removeAttr("disabled"),$("#button_final_decision_option4").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let n=u.ai_confidence,t=0;if(z&&(t=(h-5)/2.5,console.log("Using user reported trust value: ",h)),A={intervention_applied:!1,trust_level_at_start_of_interaction:t},"none"==G||p==u.ai_prediction)console.log("Not applying any intervention."),n=u.ai_confidence;else if("confidence_manip"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==M){let t=Number(u.ai_confidence.replace("%",""))/100,i=Math.min(1,t+R);i=Math.max(.5,i),n=String((100*i).toFixed(0))+"%";let e=(i-t).toFixed(2);console.log("Actual AI confidence: ",u.ai_confidence,", Confidence shown to user: ",n),A.conf_actual=u.ai_confidence,A.conf_displayed=n,A.conf_change=e,A.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI explanation intervention."),"fixed"==M){console.log("Showing explanation");let n=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(n),$("#ai_explanation_div").show(),A.explanation_shown=n,A.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),k,null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("ai_contrastive_explanation"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI explanation intervention."),"fixed"==M){console.log("Showing explanation");let n=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(n),$("#ai_contrastive_explanation_div").show(),A.explanation_shown=n,A.intervention_applied=!0,e(15,document.getElementById("ai_contrastive_explanation_div"),k,null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("both_explanation_types"==G)if(N("mitigate_underandovertrust"==F,"Goal for 'both explanation types' intervention should be 'mitigate_underandovertrust'"),t<W){console.log("Applying explanation intervention for undertrust"),console.log("Showing explanation");let n=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(n),$("#ai_explanation_div").show(),A.explanation_shown=n,A.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),k,null,"Please read the explanation.")}else if(t>V){console.log("Applying contrastive explanation intervention for overtrust");let n=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(n),$("#ai_contrastive_explanation_div").show(),A.explanation_shown=n,A.intervention_applied=!0,e(15,document.getElementById("ai_contrastive_explanation_div"),k,null,"Please read the explanation.")}console.log("AI Assistance Intervention Details: ",A),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(n),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function C(n){c=Date.now(),f=n,N(1==n||2==n||3==n||4==n,"Invalid option!");for(let t=1;t<=4;t++)t!=n&&$(`#button_final_decision_option${t}`).removeAttr("activedecision"),$(`#button_final_decision_option${t}`).attr("disabled","true");$(`#button_final_decision_option${n}`).attr("activedecision","true"),$("#final_user_confidence_div").show(),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function P(n){s=Date.now(),v=n,N(1==n||2==n||3==n,"Invalid option!");for(let t=1;t<=3;t++)t!=n&&$(`#button_final_confidence_option${t}`).removeAttr("activedecision"),$(`#button_final_confidence_option${t}`).attr("disabled","true");$(`#button_final_confidence_option${n}`).attr("activedecision","true"),async function(){let n=u.correct_option,t=u[`option${n}`],i=n==f,e=u.ai_is_correct,o="Correct answer: <b>Option "+n+": "+t+"</b>.<br>";o+=i?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=e?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",b+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",$("#balance").text(`Balance: $${b.toFixed(2)} + $2.0`),$("#result_span").html(o),$("#result_span").show(),H?$("#button_next").show():$("#user_trust_report_div").show()}()}function D(){for(let n=1;n<=4;n++)$(`#button_initial_decision_option${n}`).removeAttr("activedecision"),$(`#button_initial_decision_option${n}`).removeAttr("disabled"),$(`#button_final_decision_option${n}`).removeAttr("activedecision"),$(`#button_final_decision_option${n}`).removeAttr("disabled");for(let n=1;n<=3;n++)$(`#button_initial_confidence_option${n}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${n}`).removeAttr("disabled"),$(`#button_final_confidence_option${n}`).removeAttr("activedecision"),$(`#button_final_confidence_option${n}`).removeAttr("disabled");if($("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#ai_contrastive_explanation_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*h} / 100.`),$("#range_val").val(h),m=h,d+=1,d>=a.length)return $("#main_box_experiment").hide(),void(o?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=a[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),$("#option3_span").html(u.option3),$("#option4_span").html(u.option4),u.hasOwnProperty("reward_ratio")){let[n,t]=u.reward_ratio;n=Number(n),t=Number(t),x=n/t}else x=1;l=Date.now(),$("#progress").text(`Progress: ${d+1} / ${a.length}`),e(10,E,T,null,"Please read the symptoms and options closely.")}document.getElementById("final_user_decision_div"),$("#button_instructions_next").on("click",(()=>B(1))),$("#button_instructions_prev").on("click",(()=>B(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let n={question_i:d,user_balance_post_interaction:b,user_trust_val_before:m,user_trust_val_after:h,initial_user_decision:p,final_user_decision:f,initial_user_confidence:g,final_user_confidence:v};n.times={initial_decision:_-l,initial_confidence:r-_,final_decision:c-r,final_confidence:s-c,trust_decision:Date.now()-s},n.question=u,n.count_exited_page=w,n.intervention_details=A,n.trust_effect_prediction_data=I,async function(n){if(o)console.log("logged (mock)",n);else{n.url_data=globalThis.url_data,console.log("Data"),"study_id"in n.url_data||(n.url_data.study_id="trialrun_studies"),n.url_data.queue_id=globalThis.uid,console.log("logged",n),console.log("Logging to",t+"log");try{return await $.ajax(t+"log",{data:JSON.stringify({project:"medical-diagnosis-study/"+n.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+n.url_data.prolific_id,payload:JSON.stringify(n)}),type:"POST",contentType:"application/json"})}catch(n){console.log(n)}}}(n),w=0}D()})),$("#range_val").on("input change",(function(){h=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*h} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>O(1))),$("#button_initial_decision_option2").on("click",(()=>O(2))),$("#button_initial_decision_option3").on("click",(()=>O(3))),$("#button_initial_decision_option4").on("click",(()=>O(4))),$("#button_initial_confidence_option1").on("click",(()=>S(1))),$("#button_initial_confidence_option2").on("click",(()=>S(2))),$("#button_initial_confidence_option3").on("click",(()=>S(3))),$("#button_final_decision_option1").on("click",(()=>C(1))),$("#button_final_decision_option2").on("click",(()=>C(2))),$("#button_final_decision_option3").on("click",(()=>C(3))),$("#button_final_decision_option4").on("click",(()=>C(4))),$("#button_final_confidence_option1").on("click",(()=>P(1))),$("#button_final_confidence_option2").on("click",(()=>P(2))),$("#button_final_confidence_option3").on("click",(()=>P(3)));const j=new URLSearchParams(window.location.search),q=j.get("start"),U=j.get("uid");if(globalThis.url_data=function(n){const t={};for(const[i,e]of n)t[i]=e;return t}(j.entries()),null!=U){if(globalThis.uid=U,"prolific_random"==globalThis.uid){let n=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${j.get("prolific_queue_name")}/${n}`}}else{let n=null;for(;null==n;)n=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=n}let Y=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?Y=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(Y=[10,11,12,13,14,25,26,27,28,29]);let F=j.get("intervention_goal");if(null==F&&(F="none"),!["none","mitigate_undertrust","mitigate_overtrust","mitigate_underandovertrust"].includes(F))throw new Error("Invalid AI Assistance Intervention Goal: "+F);let G=j.get("intervention_type");if(null==G&&(G="none"),!["none","dummy","confidence_manip","ai_explanation","ai_contrastive_explanation","both_explanation_types"].includes(G))throw new Error("Invalid AI Assistance Intervention: "+G);let M=j.get("intervention_strategy");if(null==M&&(M="dummy"),!["dummy","fixed","adaptive"].includes(M))throw new Error("Invalid AI Assistance Intervention Strategy: "+M);let J=Number(j.get("intervention_threshold"));null==J&&(J=-1);let L=Number(j.get("intervention_trust_threshold"));null==L&&(L=0);let R=Number(j.get("intervention_fixedconfchange"));null==R&&(R=0);let W=Number(j.get("intervention_undertrust_threshold"));null==W&&(W=L);let V=Number(j.get("intervention_overtrust_threshold"));null==V&&(V=L);let z="true"==j.get("use_user_reported_trust_level");null==z&&(z=!1);let H="true"==j.get("skip_trust_reporting");null==H&&(H=!1),console.log("AIInterventionGoal: ",F),console.log("AIInterventionType: ",G),console.log("AIInterventionStrategy: ",M),console.log("InterventionALDiffThreshold: ",J),console.log("InterventionTrustThreshold: ",L),console.log("InterventionFixedConfChange: ",R),console.log("useUserReportedTrustVal: ",z),console.log("skip_trust_reporting: ",H),"mitigate_undertrust"==F?(N(L<=0,"Trust threshold for mitigating undertrust cannot be positive."),N(R>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==F&&(N(L>=0,"Trust threshold for mitigating overtrust cannot be negative."),N(R<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=F,globalThis.url_data.intervention_type=G,globalThis.url_data.intervention_strategy=M,globalThis.url_data.intervention_threshold=J,globalThis.url_data.intervention_fixedconfchange=R,globalThis.url_data.use_user_reported_trust_level=z,globalThis.uid.startsWith("demo_paper")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((n=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((n=>{a=n,null!=q&&(d=parseInt(q)-1,console.log("Starting from",d)),B(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let K=!1;document.onvisibilitychange=()=>{K||(w+=1,K=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),K=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,