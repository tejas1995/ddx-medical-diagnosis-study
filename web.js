(()=>{"use strict";var n={d:(t,i)=>{for(var e in i)n.o(i,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:i[e]})},o:(n,t)=>Object.prototype.hasOwnProperty.call(n,t)};n.d({},{o:()=>o});let t="https://tejassrinivasan.pythonanywhere.com/",i=null;function e(n,t,e,o,a){i&&(clearInterval(i),i=null),e.forEach((n=>n.setAttribute("disabled","true")));let l=document.createElement("div");l.id=`timer_${t.id}`,l.style.fontWeight="bold",l.style.marginTop="10px",t.appendChild(l);let r=n;l.textContent=a+` You can make your selection in ${r} second(s).`,i=setInterval((()=>{r--,r>=0?l.textContent=a+` You can make your selection in ${r} second(s).`:(null!==i&&(clearInterval(i),i=null),i=null,t.removeChild(l),e.forEach((n=>n.removeAttribute("disabled"))),o&&o())}),1e3)}var o=!1,a=[];let l,r,s,_,c,d=-1,u=null,p=-1,f=-1,g=-1,v=-1,b=0,h=5,m=-1,x=1,y=0,w=0;var I={},A={};const T=[document.getElementById("button_initial_decision_option1"),document.getElementById("button_initial_decision_option2"),document.getElementById("button_initial_decision_option3"),document.getElementById("button_initial_decision_option4")],k=[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2"),document.getElementById("button_final_decision_option3"),document.getElementById("button_final_decision_option4")],E=document.getElementById("initial_user_decision_div");function B(n,t){if(!n)throw t||"Assertion failed"}function N(n){y+=n,0==y?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),y>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==y&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),D()),$("#main_box_instructions").children(":not(input)").each(((n,t)=>{$(t).hide()})),$(`#instructions_${y}`).show()}function O(n){_=Date.now(),p=n,B(1==n||2==n||3==n||4==n,"Invalid option!"),$(`#button_initial_decision_option${n}`).attr("activedecision","true");for(let t=1;t<=4;t++)t!=n&&$(`#button_initial_decision_option${t}`).removeAttr("activedecision"),$(`#button_initial_decision_option${t}`).attr("disabled","true");console.log("User's initial decision: Option ",n),$("#initial_user_confidence_div").show(),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function S(n){r=Date.now(),g=n,B(1==n||2==n||3==n,"Invalid option!");for(let t=1;t<=3;t++)t!=n&&$(`#button_initial_confidence_option${t}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${t}`).attr("disabled","true");$(`#button_initial_confidence_option${n}`).attr("activedecision","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_decision_option3").removeAttr("disabled"),$("#button_final_decision_option4").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let n=u.ai_confidence,t=0;if(z&&(t=(h-5)/2.5,console.log("Using user reported trust value: ",h)),I={intervention_applied:!1,trust_level_at_start_of_interaction:t},"none"==G||p==u.ai_prediction)console.log("Not applying any intervention."),n=u.ai_confidence;else if("confidence_manip"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==M){let t=Number(u.ai_confidence.replace("%",""))/100,i=Math.min(1,t+R);i=Math.max(.5,i),n=String((100*i).toFixed(0))+"%";let e=(i-t).toFixed(2);console.log("Actual AI confidence: ",u.ai_confidence,", Confidence shown to user: ",n),I.conf_actual=u.ai_confidence,I.conf_displayed=n,I.conf_change=e,I.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI explanation intervention."),"fixed"==M){console.log("Showing explanation");let n=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(n),$("#ai_explanation_div").show(),I.explanation_shown=n,I.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),k,null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("ai_contrastive_explanation"==G)if("none"==F||"mitigate_undertrust"==F&&t<L||"mitigate_overtrust"==F&&t>L){if(console.log("Applying AI explanation intervention."),"fixed"==M){console.log("Showing explanation");let n=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(n),$("#ai_contrastive_explanation_div").show(),I.explanation_shown=n,I.intervention_applied=!0,e(15,document.getElementById("ai_contrastive_explanation_div"),k,null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("both_explanation_types"==G)if(B("mitigate_underandovertrust"==F,"Goal for 'both explanation types' intervention should be 'mitigate_underandovertrust'"),t<W){console.log("Applying explanation intervention for undertrust"),console.log("Showing explanation");let n=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(n),$("#ai_explanation_div").show(),I.explanation_shown=n,I.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),k,null,"Please read the explanation.")}else if(t>V){console.log("Applying contrastive explanation intervention for overtrust");let n=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(n),$("#ai_contrastive_explanation_div").show(),I.explanation_shown=n,I.intervention_applied=!0,e(15,document.getElementById("ai_contrastive_explanation_div"),k,null,"Please read the explanation.")}console.log("AI Assistance Intervention Details: ",I),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(n),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function C(n){c=Date.now(),f=n,B(1==n||2==n||3==n||4==n,"Invalid option!");for(let t=1;t<=4;t++)t!=n&&$(`#button_final_decision_option${t}`).removeAttr("activedecision"),$(`#button_final_decision_option${t}`).attr("disabled","true");$(`#button_final_decision_option${n}`).attr("activedecision","true"),$("#final_user_confidence_div").show(),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function P(n){s=Date.now(),v=n,B(1==n||2==n||3==n,"Invalid option!");for(let t=1;t<=3;t++)t!=n&&$(`#button_final_confidence_option${t}`).removeAttr("activedecision"),$(`#button_final_confidence_option${t}`).attr("disabled","true");$(`#button_final_confidence_option${n}`).attr("activedecision","true"),async function(){let n=u.correct_option,t=u[`option${n}`],i=n==f,e=u.ai_is_correct,o="Correct answer: <b>Option "+n+": "+t+"</b>.<br>";o+=i?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=e?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",b+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",$("#balance").text(`Balance: $${b.toFixed(2)} + $2.0`),$("#result_span").html(o),$("#result_span").show(),H?$("#button_next").show():$("#user_trust_report_div").show()}()}function D(){for(let n=1;n<=4;n++)$(`#button_initial_decision_option${n}`).removeAttr("activedecision"),$(`#button_initial_decision_option${n}`).removeAttr("disabled"),$(`#button_final_decision_option${n}`).removeAttr("activedecision"),$(`#button_final_decision_option${n}`).removeAttr("disabled");for(let n=1;n<=3;n++)$(`#button_initial_confidence_option${n}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${n}`).removeAttr("disabled"),$(`#button_final_confidence_option${n}`).removeAttr("activedecision"),$(`#button_final_confidence_option${n}`).removeAttr("disabled");if($("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#ai_contrastive_explanation_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#user_trust_report_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*h} / 100.`),$("#range_val").val(h),m=h,d+=1,d>=a.length)return $("#main_box_experiment").hide(),void(o?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=a[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),$("#option3_span").html(u.option3),$("#option4_span").html(u.option4),u.hasOwnProperty("reward_ratio")){let[n,t]=u.reward_ratio;n=Number(n),t=Number(t),x=n/t}else x=1;l=Date.now(),$("#progress").text(`Progress: ${d+1} / ${a.length}`),e(10,E,T,null,"Please read the symptoms and options closely.")}document.getElementById("final_user_decision_div"),document.getElementById("ai_explanation_div"),document.getElementById("ai_contrastive_explanation_div"),$("#button_instructions_next").on("click",(()=>N(1))),$("#button_instructions_prev").on("click",(()=>N(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let n={question_i:d,user_balance_post_interaction:b,user_trust_val_before:m,user_trust_val_after:h,initial_user_decision:p,final_user_decision:f,initial_user_confidence:g,final_user_confidence:v};n.times={initial_decision:_-l,initial_confidence:r-_,final_decision:c-r,final_confidence:s-c,trust_decision:Date.now()-s},n.question=u,n.count_exited_page=w,n.intervention_details=I,n.trust_effect_prediction_data=A,async function(n){if(o)console.log("logged (mock)",n);else{n.url_data=globalThis.url_data,console.log("Data"),"study_id"in n.url_data||(n.url_data.study_id="trialrun_studies"),n.url_data.queue_id=globalThis.uid,console.log("logged",n),console.log("Logging to",t+"log");try{return await $.ajax(t+"log",{data:JSON.stringify({project:"medical-diagnosis-study/"+n.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+n.url_data.prolific_id,payload:JSON.stringify(n)}),type:"POST",contentType:"application/json"})}catch(n){console.log(n)}}}(n),w=0}D()})),$("#range_val").on("input change",(function(){h=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*h} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>O(1))),$("#button_initial_decision_option2").on("click",(()=>O(2))),$("#button_initial_decision_option3").on("click",(()=>O(3))),$("#button_initial_decision_option4").on("click",(()=>O(4))),$("#button_initial_confidence_option1").on("click",(()=>S(1))),$("#button_initial_confidence_option2").on("click",(()=>S(2))),$("#button_initial_confidence_option3").on("click",(()=>S(3))),$("#button_final_decision_option1").on("click",(()=>C(1))),$("#button_final_decision_option2").on("click",(()=>C(2))),$("#button_final_decision_option3").on("click",(()=>C(3))),$("#button_final_decision_option4").on("click",(()=>C(4))),$("#button_final_confidence_option1").on("click",(()=>P(1))),$("#button_final_confidence_option2").on("click",(()=>P(2))),$("#button_final_confidence_option3").on("click",(()=>P(3)));const j=new URLSearchParams(window.location.search),q=j.get("start"),U=j.get("uid");if(globalThis.url_data=function(n){const t={};for(const[i,e]of n)t[i]=e;return t}(j.entries()),null!=U){if(globalThis.uid=U,"prolific_random"==globalThis.uid){let n=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${j.get("prolific_queue_name")}/${n}`}}else{let n=null;for(;null==n;)n=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=n}let Y=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?Y=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(Y=[10,11,12,13,14,25,26,27,28,29]);let F=j.get("intervention_goal");if(null==F&&(F="none"),!["none","mitigate_undertrust","mitigate_overtrust","mitigate_underandovertrust"].includes(F))throw new Error("Invalid AI Assistance Intervention Goal: "+F);let G=j.get("intervention_type");if(null==G&&(G="none"),!["none","dummy","confidence_manip","ai_explanation","ai_contrastive_explanation","both_explanation_types"].includes(G))throw new Error("Invalid AI Assistance Intervention: "+G);let M=j.get("intervention_strategy");if(null==M&&(M="dummy"),!["dummy","fixed","adaptive"].includes(M))throw new Error("Invalid AI Assistance Intervention Strategy: "+M);let J=Number(j.get("intervention_threshold"));null==J&&(J=-1);let L=Number(j.get("intervention_trust_threshold"));null==L&&(L=0);let R=Number(j.get("intervention_fixedconfchange"));null==R&&(R=0);let W=Number(j.get("intervention_undertrust_threshold"));null==W&&(W=L);let V=Number(j.get("intervention_overtrust_threshold"));null==V&&(V=L);let z="true"==j.get("use_user_reported_trust_level");null==z&&(z=!1);let H="true"==j.get("skip_trust_reporting");null==H&&(H=!1),console.log("AIInterventionGoal: ",F),console.log("AIInterventionType: ",G),console.log("AIInterventionStrategy: ",M),console.log("InterventionALDiffThreshold: ",J),console.log("InterventionTrustThreshold: ",L),console.log("InterventionFixedConfChange: ",R),console.log("useUserReportedTrustVal: ",z),console.log("skip_trust_reporting: ",H),"mitigate_undertrust"==F?(B(L<=0,"Trust threshold for mitigating undertrust cannot be positive."),B(R>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==F&&(B(L>=0,"Trust threshold for mitigating overtrust cannot be negative."),B(R<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=F,globalThis.url_data.intervention_type=G,globalThis.url_data.intervention_strategy=M,globalThis.url_data.intervention_threshold=J,globalThis.url_data.intervention_fixedconfchange=R,globalThis.url_data.use_user_reported_trust_level=z,globalThis.uid.startsWith("demo_paper")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((n=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((n=>{a=n,null!=q&&(d=parseInt(q)-1,console.log("Starting from",d)),N(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let K=!1;document.onvisibilitychange=()=>{K||(w+=1,K=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),K=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNaLHNCQUF0QlQsSUFDUDdCLEVBQU84QixHQUE4QixFQUFHLGdFQUN4QzlCLEVBQU9zQyxHQUErQixFQUFHLG1FQUc3Q3dCLFdBQVdDLFNBQTRCLGtCQUFJbEMsRUFDM0NpQyxXQUFXQyxTQUE0QixrQkFBSW5DLEVBQzNDa0MsV0FBV0MsU0FBZ0Msc0JBQUloQyxFQUMvQytCLFdBQVdDLFNBQWlDLHVCQUFJZ0MsRUFDaERqQyxXQUFXQyxTQUF1Qyw2QkFBSXpCLEVBQ3REd0IsV0FBV0MsU0FBd0MsOEJBQUlwQyxFQUduRG1DLFdBQVdFLElBQUlnQyxXQUFXLGdCQUMxQnpILEdBQVcsR0FJZjZDLFFBQVFDLElBQUksbUJBQW9CeUMsV0FBV0UsS0Yxd0JwQ3hDLGlCQUtILGFBSG1CcEIsRUFBRTZGLFFBQ2pCLGdCQUFnQm5DLFdBQVdFLGNBQWMvQyxLQUFLQyxRQUd0RCxDRXF3QkFnRixHQUFZQyxPQUFPQyxJQUVmaEYsUUFBUUMsSUFBSSxvQkFDWkQsUUFBUUMsSUFBSXlDLFdBQVdFLEtBQ3ZCYSxPQUFPQyxTQUFTdUIsUUFBUSxJQUUxQkMsTUFBTUMsSUFDSi9ILEVBQU8rSCxFQUNjLE1BQWpCdkIsSUFDQWxHLEVBQWEwSCxTQUFTeEIsR0FBaUIsRUFDdkM1RCxRQUFRQyxJQUFJLGdCQUFpQnZDLElBR2pDb0IsRUFBa0IsR0FDbEJFLEVBQUUsMEJBQTBCRyxPQUM1QkgsRUFBRSxpQ0FBaUNLLE1BQU0sSUFHN0NXLFFBQVFDLElBQUksNkJBQThCeUMsV0FBV0UsS0FFckQsSUFBSXlDLEdBQWUsRUFDbkI5SSxTQUFTK0ksbUJBQXFCLEtBQ3JCRCxJQUNEaEgsR0FBcUIsRUFDckJnSCxHQUFlLEVBQ1QzQyxXQUFXRSxJQUFLZ0MsV0FBVyxTQUM3QlcsTUFBTSxnRkFFVkYsR0FBZSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nvbm5lY3Rvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgeyBERVZNT0RFIH0gZnJvbSAnLi9nbG9iYWxzJ1xuaW1wb3J0IHsgTU9DS01PREUgfSBmcm9tICcuL21haW4nXG5cbmxldCBTRVJWRVJfTE9HX1JPT1QgPSBERVZNT0RFID8gXCJodHRwOi8vMTI3LjAuMC4xOjUwMDAvXCIgOiBcImh0dHBzOi8vdGVqYXNzcmluaXZhc2FuLnB5dGhvbmFueXdoZXJlLmNvbS9cIlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZF9kYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gaW5jbHVkZSB0aW1lc3RhbXAgc28gdGhhdCB0aGluZ3MgZG9uJ3QgZ2V0IGNhY2hlZFxuICAgIGxldCByZXN1bHQgPSBhd2FpdCAkLmdldEpTT04oXG4gICAgICAgIGBiYWtlZF9xdWV1ZXMvJHtnbG9iYWxUaGlzLnVpZH0uanNvbj90PSR7RGF0ZS5ub3coKX1gLFxuICAgIClcbiAgICByZXR1cm4gcmVzdWx0XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9nX2RhdGEoZGF0YSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKE1PQ0tNT0RFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9nZ2VkIChtb2NrKVwiLCBkYXRhKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBkYXRhW1widXJsX2RhdGFcIl0gPSBnbG9iYWxUaGlzLnVybF9kYXRhXG4gICAgY29uc29sZS5sb2coXCJEYXRhXCIpXG4gICAgaWYgKCEoXCJzdHVkeV9pZFwiIGluIGRhdGFbJ3VybF9kYXRhJ10pKSB7XG4gICAgICAgIGRhdGFbJ3VybF9kYXRhJ11bXCJzdHVkeV9pZFwiXSA9IFwidHJpYWxydW5fc3R1ZGllc1wiXG4gICAgfVxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXVtcInF1ZXVlX2lkXCJdID0gZ2xvYmFsVGhpcy51aWRcbiAgICBjb25zb2xlLmxvZyhcImxvZ2dlZFwiLCBkYXRhKVxuICAgIGNvbnNvbGUubG9nKFwiTG9nZ2luZyB0b1wiLCBTRVJWRVJfTE9HX1JPT1QgKyBcImxvZ1wiKVxuXG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcIm1lZGljYWwtZGlhZ25vc2lzLXN0dWR5L1wiICsgZGF0YVsndXJsX2RhdGEnXVsnc3R1ZHlfaWQnXSxcbiAgICAgICAgICAgICAgICAgICAgdWlkOiBnbG9iYWxUaGlzLnVpZC5yZXBsYWNlKFwiL1wiLCBcIl9cIikgKyBcIl9cIiArIGRhdGFbJ3VybF9kYXRhJ11bJ3Byb2xpZmljX2lkJ10sXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxufSIsImltcG9ydCB7IEVOQUJMRV9USU1FUiB9IGZyb20gJy4vZ2xvYmFscyc7XG5cbmZ1bmN0aW9uIHBhcmFtc1RvT2JqZWN0KGVudHJpZXMpIHtcbiAgY29uc3QgcmVzdWx0ID0ge31cbiAgLy8gZWFjaCAnZW50cnknIGlzIGEgW2tleSwgdmFsdWVdIHR1cHBsZVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5sZXQgYWN0aXZlVGltZXI6IFJldHVyblR5cGU8dHlwZW9mIHNldEludGVydmFsPiB8IG51bGwgPSBudWxsOyAvLyBUaW1lciBpbnRlcnZhbFxuXG5mdW5jdGlvbiBzdGFydFRpbWVyKGR1cmF0aW9uLCBzdGVwRGl2LCBidXR0b25zLCBjYWxsYmFjaywgbWVzc2FnZSkge1xuICBpZiAoIUVOQUJMRV9USU1FUikge1xuICAgICAgLy8gSWYgdGhlIHRpbWVyIGlzIGRpc2FibGVkLCBlbmFibGUgdGhlIGJ1dHRvbnMgaW1tZWRpYXRlbHlcbiAgICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpKTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENsZWFyIGFueSBleGlzdGluZyB0aW1lciB0byBwcmV2ZW50IG11bHRpcGxlIGludGVydmFsc1xuICBpZiAoYWN0aXZlVGltZXIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoYWN0aXZlVGltZXIpO1xuICAgICAgYWN0aXZlVGltZXIgPSBudWxsO1xuICB9XG5cbiAgLy8gRGlzYWJsZSBidXR0b25zXG4gIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKSk7XG4gIFxuICAvLyBTaG93IHRpbWVyIHZpc3VhbGx5XG4gIGxldCB0aW1lckRpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGltZXJEaXNwbGF5LmlkID0gYHRpbWVyXyR7c3RlcERpdi5pZH1gO1xuICB0aW1lckRpc3BsYXkuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgdGltZXJEaXNwbGF5LnN0eWxlLm1hcmdpblRvcCA9ICcxMHB4JztcbiAgc3RlcERpdi5hcHBlbmRDaGlsZCh0aW1lckRpc3BsYXkpO1xuXG4gIGxldCByZW1haW5pbmdUaW1lID0gZHVyYXRpb247XG5cbiAgLy8gSW5pdGlhbCBkaXNwbGF5XG4gIHRpbWVyRGlzcGxheS50ZXh0Q29udGVudCA9IG1lc3NhZ2UgKyBgIFlvdSBjYW4gbWFrZSB5b3VyIHNlbGVjdGlvbiBpbiAke3JlbWFpbmluZ1RpbWV9IHNlY29uZChzKS5gO1xuXG4gIGFjdGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgcmVtYWluaW5nVGltZS0tO1xuICAgICAgaWYgKHJlbWFpbmluZ1RpbWUgPj0gMCkge1xuICAgICAgICAgIHRpbWVyRGlzcGxheS50ZXh0Q29udGVudCA9IG1lc3NhZ2UgKyBgIFlvdSBjYW4gbWFrZSB5b3VyIHNlbGVjdGlvbiBpbiAke3JlbWFpbmluZ1RpbWV9IHNlY29uZChzKS5gO1xuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGlmIChhY3RpdmVUaW1lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjbGVhckludGVydmFsKGFjdGl2ZVRpbWVyKTsgLy8gU3RvcCB0aGUgdGltZXJcbiAgICAgICAgICAgICAgYWN0aXZlVGltZXIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY3RpdmVUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAvLyBSZW1vdmUgdGltZXIgZGlzcGxheVxuICAgICAgICAgIHN0ZXBEaXYucmVtb3ZlQ2hpbGQodGltZXJEaXNwbGF5KTtcblxuICAgICAgICAgIC8vIEVuYWJsZSBidXR0b25zXG4gICAgICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgfVxuICB9LCAxMDAwKTtcbn1cblxuZXhwb3J0IHsgcGFyYW1zVG9PYmplY3QsIHN0YXJ0VGltZXIgfTsiLCJpbXBvcnQgeyBERVZNT0RFIH0gZnJvbSBcIi4vZ2xvYmFsc1wiXG5leHBvcnQgdmFyIFVJRDogc3RyaW5nXG5leHBvcnQgdmFyIE1PQ0tNT0RFOiBib29sZWFuID0gZmFsc2VcbmltcG9ydCB7IGxvYWRfZGF0YSwgbG9nX2RhdGEgfSBmcm9tICcuL2Nvbm5lY3RvcidcbmltcG9ydCB7IHBhcmFtc1RvT2JqZWN0LCBzdGFydFRpbWVyIH0gZnJvbSBcIi4vdXRpbHNcIlxuLy9pbXBvcnQgeyBnZXRfdXNlcl90cnVzdF9lZmZlY3QsIGdldF9hZGp1c3RlZF9haV9jb25maWRlbmNlfSBmcm9tIFwiLi9ydW5fdXNlcl9tb2RlbHNcIlxuXG5sZXQgVVNFUl9NT0RFTFNfUk9PVCA9IFwiaHR0cHM6Ly90ZWphc3NyaW5pdmFzYW4ucHl0aG9uYW55d2hlcmUuY29tL1wiXG5sZXQgdXNlcl9kZWNpc2lvbl9tb2RlbCA9IFwidXNlcl9hY2NlcHRhbmNlX21vZGVsLWxvZ2lzdGljcmVncmVzc2lvbi0wLjkzNDd0ZXN0ZjFcIlxubGV0IHRydXN0X2VmZmVjdF9tb2RlbCA9IFwidHJ1c3RfZWZmZWN0X21vZGVsLXN2bV9saW5lYXItMC40NjQ0dGVzdG1hZS0wLjkwOTV0ZXN0dGVkYVwiXG5cbnZhciBkYXRhOiBhbnlbXSA9IFtdXG5sZXQgcXVlc3Rpb25faSA9IC0xXG5sZXQgcXVlc3Rpb246IGFueSA9IG51bGxcbmxldCBpbml0aWFsX3VzZXJfZGVjaXNpb246IG51bWJlciA9IC0xXG5sZXQgZmluYWxfdXNlcl9kZWNpc2lvbjogbnVtYmVyID0gLTFcbmxldCBpbml0aWFsX3VzZXJfY29uZmlkZW5jZTogbnVtYmVyID0gLTFcbmxldCBmaW5hbF91c2VyX2NvbmZpZGVuY2U6IG51bWJlciA9IC0xXG5sZXQgYmFsYW5jZSA9IDBcblxubGV0IHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWw6IG51bWJlciA9IDVcbmxldCBwcmV2X3VzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWw6IG51bWJlciA9IC0xXG5cbmxldCBiZXRfdmFsX3JhdGlvOiBudW1iZXIgPSAxXG5sZXQgdGltZV9xdWVzdGlvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV90cnVzdF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQ6IG51bWJlclxubGV0IHRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydDogbnVtYmVyXG5sZXQgaW5zdHJ1Y3Rpb25faTogbnVtYmVyID0gMFxubGV0IGNvdW50X2V4aXRlZF9wYWdlOiBudW1iZXIgPSAwXG5cblxubGV0IHVzZXJfY3VycmVudF9lc3RpbWF0ZWRfdHJ1c3RfbGV2ZWw6IG51bWJlciA9IDBcblxudmFyIGFsbF91c2VyX2ludGVyYWN0aW9ucyA9IFtdXG52YXIgaW50ZXJ2ZW50aW9uX2RldGFpbHMgPSB7fVxudmFyIHRydXN0X2VmZmVjdF9wcmVkaWN0aW9uX2RhdGEgPSB7fVxubGV0IGZpbmRuZXdjb25mX3Jlc3VsdDogYW55XG5cbmNvbnN0IGJ1dHRvbnNfaW5pdGlhbGRlY2lzaW9uID0gW1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjJcIiksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24zXCIpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uNFwiKSxcbl1cbmNvbnN0IGJ1dHRvbnNfZmluYWxkZWNpc2lvbiA9IFtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24xXCIpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjJcIiksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uM1wiKSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb240XCIpLFxuXVxuY29uc3QgaW5pdGlhbF91c2VyX2RlY2lzaW9uX2RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5pdGlhbF91c2VyX2RlY2lzaW9uX2RpdlwiKVxuY29uc3QgZmluYWxfdXNlcl9kZWNpc2lvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbmFsX3VzZXJfZGVjaXNpb25fZGl2XCIpXG5jb25zdCBhaV9leHBsYW5hdGlvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpX2V4cGxhbmF0aW9uX2RpdlwiKVxuY29uc3QgYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9kaXZcIilcblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHRocm93IG1lc3NhZ2UgfHwgXCJBc3NlcnRpb24gZmFpbGVkXCI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuZXh0X2luc3RydWN0aW9ucyhpbmNyZW1lbnQ6IG51bWJlcikge1xuICAgIGluc3RydWN0aW9uX2kgKz0gaW5jcmVtZW50XG5cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA9PSAwKSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9uX2kgPj0gNikge1xuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuc2hvdygpXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIlN0YXJ0IHN0dWR5XCIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIiNpbnN0cnVjdGlvbnNfYW5kX2RlY29yYXRpb25zXCIpLmhpZGUoKVxuICAgICAgICAkKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS52YWwoXCJOZXh0XCIpXG4gICAgfVxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDcpIHtcbiAgICAgICAgJChcIiNtYWluX2JveF9pbnN0cnVjdGlvbnNcIikuaGlkZSgpXG4gICAgICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5zaG93KClcbiAgICAgICAgbmV4dF9xdWVzdGlvbigpXG4gICAgfVxuXG4gICAgJChcIiNtYWluX2JveF9pbnN0cnVjdGlvbnNcIikuY2hpbGRyZW4oXCI6bm90KGlucHV0KVwiKS5lYWNoKChfLCBlbCkgPT4ge1xuICAgICAgICAkKGVsKS5oaWRlKClcbiAgICB9KVxuICAgICQoYCNpbnN0cnVjdGlvbnNfJHtpbnN0cnVjdGlvbl9pfWApLnNob3coKVxufVxuJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikub24oXCJjbGlja1wiLCAoKSA9PiBuZXh0X2luc3RydWN0aW9ucygrMSkpXG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfcHJldlwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKC0xKSlcblxuJChcIiNidXR0b25fbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICBpZiAocXVlc3Rpb25faSAhPSAtMSkge1xuICAgICAgICBsZXQgbG9nZ2VkX2RhdGEgPSB7XG4gICAgICAgICAgICBcInF1ZXN0aW9uX2lcIjogcXVlc3Rpb25faSxcbiAgICAgICAgICAgIFwidXNlcl9iYWxhbmNlX3Bvc3RfaW50ZXJhY3Rpb25cIjogYmFsYW5jZSxcbiAgICAgICAgICAgIFwidXNlcl90cnVzdF92YWxfYmVmb3JlXCI6IHByZXZfdXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCxcbiAgICAgICAgICAgIFwidXNlcl90cnVzdF92YWxfYWZ0ZXJcIjogdXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCxcbiAgICAgICAgICAgIFwiaW5pdGlhbF91c2VyX2RlY2lzaW9uXCI6IGluaXRpYWxfdXNlcl9kZWNpc2lvbixcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9kZWNpc2lvblwiOiBmaW5hbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJpbml0aWFsX3VzZXJfY29uZmlkZW5jZVwiOiBpbml0aWFsX3VzZXJfY29uZmlkZW5jZSxcbiAgICAgICAgICAgIFwiZmluYWxfdXNlcl9jb25maWRlbmNlXCI6IGZpbmFsX3VzZXJfY29uZmlkZW5jZSxcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ2dlZF9kYXRhWyd0aW1lcyddID0ge1xuICAgICAgICAgICAgXCJpbml0aWFsX2RlY2lzaW9uXCI6IHRpbWVfaW5pdGlhbF9jb25maWRlbmNlX3N0YXJ0IC0gdGltZV9xdWVzdGlvbl9zdGFydCxcbiAgICAgICAgICAgIFwiaW5pdGlhbF9jb25maWRlbmNlXCI6IHRpbWVfZmluYWxfZGVjaXNpb25fc3RhcnQgLSB0aW1lX2luaXRpYWxfY29uZmlkZW5jZV9zdGFydCxcbiAgICAgICAgICAgIFwiZmluYWxfZGVjaXNpb25cIjogdGltZV9maW5hbF9jb25maWRlbmNlX3N0YXJ0IC0gdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydCxcbiAgICAgICAgICAgIFwiZmluYWxfY29uZmlkZW5jZVwiOiB0aW1lX3RydXN0X2RlY2lzaW9uX3N0YXJ0IC0gdGltZV9maW5hbF9jb25maWRlbmNlX3N0YXJ0LFxuICAgICAgICAgICAgXCJ0cnVzdF9kZWNpc2lvblwiOiBEYXRlLm5vdygpIC0gdGltZV90cnVzdF9kZWNpc2lvbl9zdGFydCxcbiAgICAgICAgfVxuICAgICAgICBsb2dnZWRfZGF0YVsncXVlc3Rpb24nXSA9IHF1ZXN0aW9uXG4gICAgICAgIGxvZ2dlZF9kYXRhWydjb3VudF9leGl0ZWRfcGFnZSddID0gY291bnRfZXhpdGVkX3BhZ2VcbiAgICAgICAgbG9nZ2VkX2RhdGFbJ2ludGVydmVudGlvbl9kZXRhaWxzJ10gPSBpbnRlcnZlbnRpb25fZGV0YWlsc1xuICAgICAgICBsb2dnZWRfZGF0YVsndHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSddID0gdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YVxuICAgICAgICBsb2dfZGF0YShsb2dnZWRfZGF0YSlcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgPSAwXG5cbiAgICB9XG4gICAgbmV4dF9xdWVzdGlvbigpXG59KTtcblxuJCgnI3JhbmdlX3ZhbCcpLm9uKCdpbnB1dCBjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCA9ICgkKHRoaXMpLnZhbCgpISBhcyBudW1iZXIpXG4gICAgJChcIiNyYW5nZV90ZXh0XCIpLnRleHQoYEFmdGVyIHRoaXMgaW50ZXJhY3Rpb24sIHlvdXIgY3VycmVudCB0cnVzdCBpbiB0aGUgQUk6ICR7dXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAqIDEwfSAvIDEwMC5gKVxuICAgICQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG59KTtcblxuZnVuY3Rpb24gbWFrZV9pbml0aWFsX3VzZXJfZGVjaXNpb24ob3B0aW9uKSB7XG4gICAgdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgaW5pdGlhbF91c2VyX2RlY2lzaW9uID0gb3B0aW9uXG4gICAgYXNzZXJ0KG9wdGlvbiA9PSAxIHx8IG9wdGlvbiA9PSAyIHx8IG9wdGlvbiA9PSAzIHx8IG9wdGlvbiA9PSA0LCBcIkludmFsaWQgb3B0aW9uIVwiKVxuXG4gICAgLy8gUmVtb3ZlIGFjdGl2ZWRlY2lzaW9uIGZvciBhbGwgYnV0dG9ucyBleGNlcHQgdGhlIHNlbGVjdGVkIG9uZVxuICAgICQoYCNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24ke29wdGlvbn1gKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IG9wdGlvbikge1xuICAgICAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgfVxuICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uJHtpfWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJVc2VyJ3MgaW5pdGlhbCBkZWNpc2lvbjogT3B0aW9uIFwiLCBvcHRpb24pXG4gICAgXG4gICAgJChcIiNpbml0aWFsX3VzZXJfY29uZmlkZW5jZV9kaXZcIikuc2hvdygpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjNcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG59XG4kKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbigxKSlcbiQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5vbihcImNsaWNrXCIsICgpID0+IG1ha2VfaW5pdGlhbF91c2VyX2RlY2lzaW9uKDIpKVxuJChcIiNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24zXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9pbml0aWFsX3VzZXJfZGVjaXNpb24oMykpXG4kKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjRcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbig0KSlcblxuZnVuY3Rpb24gZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlKGNvbmZfbGV2ZWwpIHtcbiAgICB0aW1lX2ZpbmFsX2RlY2lzaW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGluaXRpYWxfdXNlcl9jb25maWRlbmNlID0gY29uZl9sZXZlbFxuICAgIGFzc2VydChjb25mX2xldmVsID09IDEgfHwgY29uZl9sZXZlbCA9PSAyIHx8IGNvbmZfbGV2ZWwgPT0gMywgXCJJbnZhbGlkIG9wdGlvbiFcIilcbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lLiBEaXNhYmxlIGFsbCBidXR0b25zLlxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgICAgICBpZiAoaSAhPSBjb25mX2xldmVsKSB7XG4gICAgICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uJHtpfWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9XG4gICAgJChgI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uJHtjb25mX2xldmVsfWApLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcblxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uNFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG5cbiAgICBnZXRfYWlfYXNzaXN0YW5jZSgpXG59XG4kKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZSgxKSlcbiQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlKDIpKVxuJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjNcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfaW5pdGlhbF91c2VyX2NvbmZpZGVuY2UoMykpXG5cblxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdXNlcl9kZWNpc2lvbl9wcm9iKCkge1xuICAgIC8vIFByZXBhcmUgaW5wdXRzIGZvciB0aGUgdXNlciBkZWNpc2lvbiBtb2RlbFxuICAgIGxldCB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50ID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgIGxldCB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSA9IGluaXRpYWxfdXNlcl9jb25maWRlbmNlXG4gICAgbGV0IGFpX2NvbmZpZGVuY2UgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXS5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDBcbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgfVxuICAgIGxldCB1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyA9IHtcbiAgICAgICAgXCJ1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50XCI6IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQsXG4gICAgICAgIFwidXNlcl9pbml0aWFsX2NvbmZpZGVuY2VcIjogdXNlcl9pbml0aWFsX2NvbmZpZGVuY2UsXG4gICAgICAgIFwiYWlfY29uZmlkZW5jZVwiOiBhaV9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgIFwidGltZXN0ZXBcIjogcXVlc3Rpb25faSxcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0OiBhbnlcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCAkLmFqYXgoXG4gICAgICAgICAgICBVU0VSX01PREVMU19ST09UICsgXCJnZXRfdXNlcl9kZWNpc2lvbl9wcm9iXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcIm1lZGljYWwtZGlhZ25vc2lzLXN0dWR5XCIsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHVzZXJfZGVjaXNpb25fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFUlJPUiFcIilcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJ1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0c1wiOiB1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cywgXG4gICAgICAgIFwidXNlcl9hY2NlcHRhbmNlX2xpa2VsaWhvb2RcIjogcmVzdWx0W1wicHJlZF9wcm9ic1wiXVswXVsxXVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZXhhbWluZV9lZmZlY3Rfb2ZfdHJ1c3Rfb25fZGVjaXNpb25fbWFraW5nKCkge1xuICAgIC8vIFByZXBhcmUgaW5wdXQgdmFyaWFibGVzIGZvciB1c2VyIGRlY2lzaW9uIG1vZGVsXG4gICAgbGV0IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQgPSBOdW1iZXIoaW5pdGlhbF91c2VyX2RlY2lzaW9uID09IHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0pXG4gICAgbGV0IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlID0gaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VcbiAgICBsZXQgYWlfY29uZmlkZW5jZSA9IE51bWJlcihxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMFxuICAgIGxldCB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsXG4gICAgaWYgKHVzZVVzZXJSZXBvcnRlZFRydXN0VmFsKSB7XG4gICAgICAgIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA9ICh1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsIC0gNSkgLyAyLjVcbiAgICB9XG4gICAgbGV0IHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzID0ge1xuICAgICAgICBcInVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnRcIjogdXNlcl9haV9pbml0aWFsX2FncmVlbWVudCxcbiAgICAgICAgXCJ1c2VyX2luaXRpYWxfY29uZmlkZW5jZVwiOiB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSxcbiAgICAgICAgXCJhaV9jb25maWRlbmNlXCI6IGFpX2NvbmZpZGVuY2UsXG4gICAgICAgIFwidXNlcl9jdXJyZW50X3RydXN0X2xldmVsXCI6IHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCxcbiAgICAgICAgXCJ0aW1lc3RlcFwiOiBxdWVzdGlvbl9pLFxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIlVzZXIgZGVjaXNpb24gbW9kZWwgaW5wdXRzOiBcIiwgdXNlcl9kZWNpc2lvbl9tb2RlbF9pbnB1dHMpXG5cbiAgICBsZXQgYWxkaWZmX3Jlc3VsdDogYW55XG4gICAgdHJ5IHtcbiAgICAgICAgYWxkaWZmX3Jlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImV4YW1pbmVfZWZmZWN0X29mX3RydXN0X29uX2RlY2lzaW9uX21ha2luZ1wiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB1c2VyX2RlY2lzaW9uX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeSh1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IhXCIpXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGFsZGlmZl9yZXN1bHRcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmluZF9iZXN0X2FpY29uZl90b19kaXNwbGF5KHVzZXJfYWNjZXB0YW5jZV9saWtlbGlob29kX25ldXRyYWxfdHJ1c3QpIHtcbiAgICAvLyBQcmVwYXJlIGlucHV0IHZhcmlhYmxlcyBmb3IgdXNlciBkZWNpc2lvbiBtb2RlbFxuICAgIGxldCB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50ID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgIGxldCB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSA9IGluaXRpYWxfdXNlcl9jb25maWRlbmNlXG4gICAgbGV0IGFpX2NvbmZpZGVuY2UgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXS5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDBcbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgfVxuICAgIGxldCBmaW5kbmV3Y29uZl9pbnB1dF92YXJpYWJsZXMgPSB7XG4gICAgICAgIFwidXNlcl9haV9pbml0aWFsX2FncmVlbWVudFwiOiB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50LFxuICAgICAgICBcInVzZXJfaW5pdGlhbF9jb25maWRlbmNlXCI6IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgIFwidGltZXN0ZXBcIjogcXVlc3Rpb25faSxcbiAgICAgICAgXCJ1c2VyX2FjY2VwdGFuY2VfbGlrZWxpaG9vZF9uZXV0cmFsX3RydXN0XCI6IHVzZXJfYWNjZXB0YW5jZV9saWtlbGlob29kX25ldXRyYWxfdHJ1c3QsXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGZpbmRuZXdjb25mX3Jlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImZpbmRfYmVzdF9haWNvbmZfdG9fZGlzcGxheVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB1c2VyX2RlY2lzaW9uX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShmaW5kbmV3Y29uZl9pbnB1dF92YXJpYWJsZXMpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIVwiKVxuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cblxuICAgIHJldHVybiBmaW5kbmV3Y29uZl9yZXN1bHRcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X2FpX2Fzc2lzdGFuY2UoKSB7XG4gICAgY29uc29sZS5sb2coXCJHZXR0aW5nIEFJIGFzc2lzdGFuY2UuLi5cIilcblxuICAgIGxldCBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSA9IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl1cbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXNpbmcgdXNlciByZXBvcnRlZCB0cnVzdCB2YWx1ZTogXCIsIHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWwpXG4gICAgfVxuICAgIGludGVydmVudGlvbl9kZXRhaWxzID0ge1xuICAgICAgICBcImludGVydmVudGlvbl9hcHBsaWVkXCI6IGZhbHNlLCBcbiAgICAgICAgXCJ0cnVzdF9sZXZlbF9hdF9zdGFydF9vZl9pbnRlcmFjdGlvblwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWxcbiAgICBcbiAgICB9XG5cbiAgICBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwibm9uZVwiIHx8IChpbml0aWFsX3VzZXJfZGVjaXNpb24gPT0gcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSkpIHtcbiAgICAgICAgLy8gTm8gaW50ZXJ2ZW50aW9uLCBqdXN0IHNob3cgdGhlIEFJIGFzc2lzdGFuY2UgdGhhdCBpcyBhbHJlYWR5IHBvcHVsYXRlZCBpbiB0aGUgc3BhblxuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdCBhcHBseWluZyBhbnkgaW50ZXJ2ZW50aW9uLlwiKVxuICAgICAgICBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSA9IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl1cbiAgICB9XG4gICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiY29uZmlkZW5jZV9tYW5pcFwiKSB7XG4gICAgICAgIC8vIE1vZGlmeSBBSSBjb25maWRlbmNlXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm5vbmVcIikgfHwgXG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibWl0aWdhdGVfdW5kZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA8IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX292ZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA+IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXBwbHlpbmcgQUkgY29uZmlkZW5jZSBtYW5pcHVsYXRpb24gaW50ZXJ2ZW50aW9uLlwiKVxuICAgICAgICAgICAgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJmaXhlZFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSB0byBBSSdzIGNvbmZpZGVuY2VcbiAgICAgICAgICAgICAgICAvLyAoSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlIGNhbiBiZSBuZWdhdGl2ZSlcbiAgICAgICAgICAgICAgICBsZXQgYWlfY29uZmlkZW5jZSA9IE51bWJlcihxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMFxuICAgICAgICAgICAgICAgIGxldCBuZXdfY29uZmlkZW5jZSA9IE1hdGgubWluKDEsIGFpX2NvbmZpZGVuY2UgKyBJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UpXG4gICAgICAgICAgICAgICAgbmV3X2NvbmZpZGVuY2UgPSBNYXRoLm1heCgwLjUsIG5ld19jb25maWRlbmNlKVxuICAgICAgICAgICAgICAgIGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gU3RyaW5nKCggbmV3X2NvbmZpZGVuY2UgKiAxMDApLnRvRml4ZWQoMCkpICsgXCIlXCJcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlkZW5jZV9jaGFuZ2UgPSAobmV3X2NvbmZpZGVuY2UgLSBhaV9jb25maWRlbmNlKS50b0ZpeGVkKDIpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBY3R1YWwgQUkgY29uZmlkZW5jZTogXCIsIHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0sIFwiLCBDb25maWRlbmNlIHNob3duIHRvIHVzZXI6IFwiLCBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSlcblxuICAgICAgICAgICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzW1wiY29uZl9hY3R1YWxcIl0gPSBxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJjb25mX2Rpc3BsYXllZFwiXSA9IGRpc3BsYXllZF9haV9jb25maWRlbmNlXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJjb25mX2NoYW5nZVwiXSA9IGNvbmZpZGVuY2VfY2hhbmdlXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJpbnRlcnZlbnRpb25fYXBwbGllZFwiXSA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJhZGFwdGl2ZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGFkYXB0aXZlIHN0cmF0ZWd5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbmRpdGlvbnMgZm9yIGFwcGx5aW5nICdjb25maWRlbmNlIG1hbmlwdWxhdGlvbicgaW50ZXJ2ZW50aW9uIG5vdCBzYXRpc2ZpZWQuXCIpXG4gICAgICAgIH1cblxuICAgIH0gXG4gICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiYWlfZXhwbGFuYXRpb25cIikge1xuICAgICAgICAvLyBBZGQgQUkgZXhwbGFuYXRpb25cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibm9uZVwiKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX3VuZGVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPCBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCkgfHxcbiAgICAgICAgICAgIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJtaXRpZ2F0ZV9vdmVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPiBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFwcGx5aW5nIEFJIGV4cGxhbmF0aW9uIGludGVydmVudGlvbi5cIilcbiAgICAgICAgICAgIGlmIChBSUludGVydmVudGlvblN0cmF0ZWd5ID09IFwiZml4ZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2hvd2luZyBleHBsYW5hdGlvblwiKVxuICAgICAgICAgICAgICAgIGxldCBleHBsYW5hdGlvbl9zaG93bjogc3RyaW5nID0gIXF1ZXN0aW9uIVtcImFpX2V4cGxhbmF0aW9uXCJdID8gXCJObyBleHBsYW5hdGlvbiBwcm92aWRlZFwiIDogcXVlc3Rpb24hW1wiYWlfZXhwbGFuYXRpb25cIl1cbiAgICAgICAgICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3NwYW5cIikuaHRtbChleHBsYW5hdGlvbl9zaG93bilcbiAgICAgICAgICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImV4cGxhbmF0aW9uX3Nob3duXCJdID0gZXhwbGFuYXRpb25fc2hvd25cbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImludGVydmVudGlvbl9hcHBsaWVkXCJdID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWlfZXhwbGFuYXRpb25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaV9leHBsYW5hdGlvbl9kaXZcIilcbiAgICAgICAgICAgICAgICBzdGFydFRpbWVyKDE1LCBhaV9leHBsYW5hdGlvbl9kaXYsIGJ1dHRvbnNfZmluYWxkZWNpc2lvbiwgbnVsbCwgXCJQbGVhc2UgcmVhZCB0aGUgZXhwbGFuYXRpb24uXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBSUludGVydmVudGlvblN0cmF0ZWd5ID09IFwiYWRhcHRpdmVcIikge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEltcGxlbWVudCBhZGFwdGl2ZSBzdHJhdGVneVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbmRpdGlvbnMgZm9yIGFwcGx5aW5nICdBSSBleHBsYW5hdGlvbicgaW50ZXJ2ZW50aW9uIG5vdCBzYXRpc2ZpZWQuXCIpXG4gICAgICAgIH1cblxuICAgIH1cbiAgICBlbHNlIGlmIChBSUludGVydmVudGlvblR5cGUgPT0gXCJhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvblwiKSB7XG4gICAgICAgIC8vIEFkZCBBSSBleHBsYW5hdGlvblxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJub25lXCIpIHx8XG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibWl0aWdhdGVfdW5kZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA8IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX292ZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA+IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXBwbHlpbmcgQUkgZXhwbGFuYXRpb24gaW50ZXJ2ZW50aW9uLlwiKVxuICAgICAgICAgICAgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJmaXhlZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTaG93aW5nIGV4cGxhbmF0aW9uXCIpXG4gICAgICAgICAgICAgICAgbGV0IGV4cGxhbmF0aW9uX3Nob3duOiBzdHJpbmcgPSAhcXVlc3Rpb24hW1wiYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25cIl0gPyBcIk5vIGV4cGxhbmF0aW9uIHByb3ZpZGVkXCIgOiBxdWVzdGlvbiFbXCJhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvblwiXVxuICAgICAgICAgICAgICAgICQoXCIjYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fc3BhblwiKS5odG1sKGV4cGxhbmF0aW9uX3Nob3duKVxuICAgICAgICAgICAgICAgICQoXCIjYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2XCIpLnNob3coKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzW1wiZXhwbGFuYXRpb25fc2hvd25cIl0gPSBleHBsYW5hdGlvbl9zaG93blxuICAgICAgICAgICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzW1wiaW50ZXJ2ZW50aW9uX2FwcGxpZWRcIl0gPSB0cnVlXG5cbiAgICAgICAgICAgICAgICBjb25zdCBhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX2RpdlwiKVxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXIoMTUsIGFpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX2RpdiwgYnV0dG9uc19maW5hbGRlY2lzaW9uLCBudWxsLCBcIlBsZWFzZSByZWFkIHRoZSBleHBsYW5hdGlvbi5cIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJhZGFwdGl2ZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGFkYXB0aXZlIHN0cmF0ZWd5XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29uZGl0aW9ucyBmb3IgYXBwbHlpbmcgJ0FJIGV4cGxhbmF0aW9uJyBpbnRlcnZlbnRpb24gbm90IHNhdGlzZmllZC5cIilcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIGVsc2UgaWYgKEFJSW50ZXJ2ZW50aW9uVHlwZSA9PSBcImJvdGhfZXhwbGFuYXRpb25fdHlwZXNcIikge1xuICAgICAgICBhc3NlcnQgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX3VuZGVyYW5kb3ZlcnRydXN0XCIsIFwiR29hbCBmb3IgJ2JvdGggZXhwbGFuYXRpb24gdHlwZXMnIGludGVydmVudGlvbiBzaG91bGQgYmUgJ21pdGlnYXRlX3VuZGVyYW5kb3ZlcnRydXN0J1wiKVxuICAgICAgICBpZiAodXNlcl9jdXJyZW50X3RydXN0X2xldmVsIDwgSW50ZXJ2ZW50aW9uVW5kZXJ0cnVzdFRocmVzaG9sZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcHBseWluZyBleHBsYW5hdGlvbiBpbnRlcnZlbnRpb24gZm9yIHVuZGVydHJ1c3RcIilcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2hvd2luZyBleHBsYW5hdGlvblwiKVxuICAgICAgICAgICAgbGV0IGV4cGxhbmF0aW9uX3Nob3duOiBzdHJpbmcgPSAhcXVlc3Rpb24hW1wiYWlfZXhwbGFuYXRpb25cIl0gPyBcIk5vIGV4cGxhbmF0aW9uIHByb3ZpZGVkXCIgOiBxdWVzdGlvbiFbXCJhaV9leHBsYW5hdGlvblwiXVxuICAgICAgICAgICAgJChcIiNhaV9leHBsYW5hdGlvbl9zcGFuXCIpLmh0bWwoZXhwbGFuYXRpb25fc2hvd24pXG4gICAgICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJleHBsYW5hdGlvbl9zaG93blwiXSA9IGV4cGxhbmF0aW9uX3Nob3duXG4gICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImludGVydmVudGlvbl9hcHBsaWVkXCJdID0gdHJ1ZVxuXG4gICAgICAgICAgICBjb25zdCBhaV9leHBsYW5hdGlvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpX2V4cGxhbmF0aW9uX2RpdlwiKVxuICAgICAgICAgICAgc3RhcnRUaW1lcigxNSwgYWlfZXhwbGFuYXRpb25fZGl2LCBidXR0b25zX2ZpbmFsZGVjaXNpb24sIG51bGwsIFwiUGxlYXNlIHJlYWQgdGhlIGV4cGxhbmF0aW9uLlwiKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA+IEludGVydmVudGlvbk92ZXJ0cnVzdFRocmVzaG9sZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJBcHBseWluZyBjb250cmFzdGl2ZSBleHBsYW5hdGlvbiBpbnRlcnZlbnRpb24gZm9yIG92ZXJ0cnVzdFwiKVxuICAgICAgICAgICAgbGV0IGV4cGxhbmF0aW9uX3Nob3duOiBzdHJpbmcgPSAhcXVlc3Rpb24hW1wiYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25cIl0gPyBcIk5vIGV4cGxhbmF0aW9uIHByb3ZpZGVkXCIgOiBxdWVzdGlvbiFbXCJhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvblwiXVxuICAgICAgICAgICAgJChcIiNhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9zcGFuXCIpLmh0bWwoZXhwbGFuYXRpb25fc2hvd24pXG4gICAgICAgICAgICAkKFwiI2FpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJleHBsYW5hdGlvbl9zaG93blwiXSA9IGV4cGxhbmF0aW9uX3Nob3duXG4gICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImludGVydmVudGlvbl9hcHBsaWVkXCJdID0gdHJ1ZVxuXG4gICAgICAgICAgICBjb25zdCBhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9kaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX2RpdlwiKVxuICAgICAgICAgICAgc3RhcnRUaW1lcigxNSwgYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2LCBidXR0b25zX2ZpbmFsZGVjaXNpb24sIG51bGwsIFwiUGxlYXNlIHJlYWQgdGhlIGV4cGxhbmF0aW9uLlwiKVxuXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vaW50ZXJ2ZW50aW9uX2RldGFpbHNbJ2FjdHVhbF9haV9jb25maWRlbmNlJ10gPSBxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdXG4gICAgLy9pbnRlcnZlbnRpb25fZGV0YWlsc1snZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UnXSA9IGRpc3BsYXllZF9haV9jb25maWRlbmNlXG4gICAgY29uc29sZS5sb2coXCJBSSBBc3Npc3RhbmNlIEludGVydmVudGlvbiBEZXRhaWxzOiBcIiwgaW50ZXJ2ZW50aW9uX2RldGFpbHMpXG5cbiAgICAkKFwiI2FpX3ByZWRpY3Rpb25fc3BhblwiKS5odG1sKFwiT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSlcbiAgICAkKFwiI2FpX2NvbmZpZGVuY2Vfc3BhblwiKS5odG1sKGRpc3BsYXllZF9haV9jb25maWRlbmNlKVxuXG4gICAgJChcIiNhaV9hc3Npc3RhbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2ZpbmFsX3VzZXJfZGVjaXNpb25fZGl2XCIpLnNob3coKVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdHJ1c3RfZWZmZWN0KCkge1xuICAgIC8vIEdldCB0cnVzdCBlZmZlY3QgZm9yIHRoaXMgaW50ZXJhY3Rpb25cbiAgICBsZXQgaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgYWlfY29ycmVjdG5lc3MgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgZmluYWxfdXNlcl9jb3JyZWN0bmVzcyA9IE51bWJlcihmaW5hbF91c2VyX2RlY2lzaW9uID09IHF1ZXN0aW9uIVtcImNvcnJlY3Rfb3B0aW9uXCJdKVxuICAgIGxldCBhaV9jb25maWRlbmNlID0gTnVtYmVyKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0ucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwXG4gICAgbGV0IHRydXN0X2VmZmVjdF9pbnB1dHMgPSB7XG4gICAgICAgIFwiaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzXCI6IGluaXRpYWxfdXNlcl9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJhaV9jb3JyZWN0bmVzc1wiOiBhaV9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJmaW5hbF91c2VyX2NvcnJlY3RuZXNzXCI6IGZpbmFsX3VzZXJfY29ycmVjdG5lc3MsXG4gICAgICAgIFwiYWlfY29uZmlkZW5jZVwiOiBhaV9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsLFxuICAgICAgICBcInRpbWVzdGVwXCI6IHF1ZXN0aW9uX2ksXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiVHJ1c3QgZWZmZWN0IGlucHV0czogXCIsIHRydXN0X2VmZmVjdF9pbnB1dHMpXG4gICAgLy9sZXQgdHJ1c3RfZWZmZWN0ID0gZ2V0X3VzZXJfdHJ1c3RfZWZmZWN0KHRydXN0X2VmZmVjdF9pbnB1dHMpXG4gICAgbGV0IHJlc3VsdDogYW55XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgVVNFUl9NT0RFTFNfUk9PVCArIFwiZ2V0X3RydXN0X2VmZmVjdFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB0cnVzdF9lZmZlY3RfbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHRydXN0X2VmZmVjdF9pbnB1dHMpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIVwiKVxuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiVHJ1c3QgZWZmZWN0IHByZWRpY3Rpb24gcmVzdWx0OiBcIiwgcmVzdWx0KVxuICAgIGxldCB0cnVzdF9lZmZlY3QgPSBhd2FpdCByZXN1bHRbXCJ0cnVzdF9lZmZlY3RcIl1cblxuICAgIHVzZXJfY3VycmVudF9lc3RpbWF0ZWRfdHJ1c3RfbGV2ZWwgPSB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsICsgdHJ1c3RfZWZmZWN0XG4gICAgdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSA9IHtcbiAgICAgICAgXCJtb2RlbF9pbnB1dHNcIjogdHJ1c3RfZWZmZWN0X2lucHV0cyxcbiAgICAgICAgXCJwcmVkaWN0ZWRfdHJ1c3RfZWZmZWN0XCI6IHRydXN0X2VmZmVjdCxcbiAgICAgICAgXCJ1c2VyX25ld190cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsLFxuICAgIH1cbiAgICByZXR1cm4gdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YVxufVxuXG5mdW5jdGlvbiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24ob3B0aW9uKSB7XG4gICAgdGltZV9maW5hbF9jb25maWRlbmNlX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSBvcHRpb25cbiAgICBhc3NlcnQob3B0aW9uID09IDEgfHwgb3B0aW9uID09IDIgfHwgb3B0aW9uID09IDMgfHwgb3B0aW9uID09IDQsIFwiSW52YWxpZCBvcHRpb24hXCIpXG5cbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IG9wdGlvbikge1xuICAgICAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIH1cbiAgICAkKGAjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbiR7b3B0aW9ufWApLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcblxuICAgICQoXCIjZmluYWxfdXNlcl9jb25maWRlbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbn1cbiQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24oMSkpXG4kKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9maW5hbF91c2VyX2RlY2lzaW9uKDIpKVxuJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uM1wiKS5vbihcImNsaWNrXCIsICgpID0+IG1ha2VfZmluYWxfdXNlcl9kZWNpc2lvbigzKSlcbiQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjRcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24oNCkpXG5cbmZ1bmN0aW9uIGdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UoY29uZl9sZXZlbCkge1xuICAgIHRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgZmluYWxfdXNlcl9jb25maWRlbmNlID0gY29uZl9sZXZlbFxuICAgIGFzc2VydChjb25mX2xldmVsID09IDEgfHwgY29uZl9sZXZlbCA9PSAyIHx8IGNvbmZfbGV2ZWwgPT0gMywgXCJJbnZhbGlkIG9wdGlvbiFcIilcbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IGNvbmZfbGV2ZWwpIHtcbiAgICAgICAgICAgICQoYCNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgfVxuICAgICQoYCNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24ke2NvbmZfbGV2ZWx9YCkuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuXG4gICAgc2hvd19yZXN1bHQoKVxufVxuJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24xXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2ZpbmFsX3VzZXJfY29uZmlkZW5jZSgxKSlcbiQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UoMikpXG4kKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjNcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfZmluYWxfdXNlcl9jb25maWRlbmNlKDMpKVxuXG5cbmFzeW5jIGZ1bmN0aW9uIHNob3dfcmVzdWx0KCkge1xuXG4gICAgbGV0IGNvcnJlY3Rfb3B0aW9uOiBudW1iZXIgPSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXVxuICAgIGxldCBjb3JyZWN0X29wdGlvbl9zdHI6IHN0cmluZyA9IHF1ZXN0aW9uIVtgb3B0aW9uJHtjb3JyZWN0X29wdGlvbn1gXVxuICAgIGxldCB1c2VyX2lzX2NvcnJlY3Q6IGJvb2xlYW4gPSBjb3JyZWN0X29wdGlvbiA9PSBmaW5hbF91c2VyX2RlY2lzaW9uXG5cbiAgICBsZXQgYWlfaXNfY29ycmVjdDogYm9vbGVhbiA9IHF1ZXN0aW9uIVtcImFpX2lzX2NvcnJlY3RcIl1cbiAgICBsZXQgbWVzc2FnZSA9IFwiQ29ycmVjdCBhbnN3ZXI6IDxiPk9wdGlvbiBcIiArIGNvcnJlY3Rfb3B0aW9uICsgXCI6IFwiICsgY29ycmVjdF9vcHRpb25fc3RyICsgXCI8L2I+Ljxicj5cIlxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgbWVzc2FnZSArPSBcIllvdSBwaWNrZWQgT3B0aW9uIFwiICsgZmluYWxfdXNlcl9kZWNpc2lvbiArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCJZb3UgcGlja2VkIE9wdGlvbiBcIiArIGZpbmFsX3VzZXJfZGVjaXNpb24gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9pbmNvcnJlY3QnPjxiPmluY29ycmVjdDwvYj48L3NwYW4+Ljxicj5cIlxuICAgIH1cbiAgICBpZiAoYWlfaXNfY29ycmVjdCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiVGhlIEFJIHBpY2tlZCBPcHRpb24gXCIgKyBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfY29ycmVjdCc+PGI+Y29ycmVjdDxiPjwvc3Bhbj4uPGJyPlwiXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IFwiVGhlIEFJIHBpY2tlZCBPcHRpb24gXCIgKyBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5pbmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICB9XG4gICAgaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPllvdSByZWNlaXZlIGEgcmV3YXJkIG9mICQwLjEwLjwvYj48L3NwYW4+XCJcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5Zb3UgZG8gbm90IHJlY2VpdmUgYW55IHJld2FyZC48L2I+PC9zcGFuPlwiXG4gICAgfVxuXG4gICAgbWVzc2FnZSArPSBcIjxicj5cIlxuICAgIC8vaWYgKHN1Y2Nlc3MpIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgZ2FpbiAkJHsoYmV0X3ZhbCpiZXRfdmFsX3JhdGlvKS50b0ZpeGVkKDIpfS5gXG4gICAgLy8gICAgYmFsYW5jZSArPSBiZXRfdmFsKmJldF92YWxfcmF0aW9cbiAgICAvL30gZWxzZSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBgWW91IGxvc2UgJCR7KGJldF92YWwvMS4wKS50b0ZpeGVkKDIpfS5gXG4gICAgLy8gICAgYmFsYW5jZSAtPSBiZXRfdmFsLzEuMFxuICAgIC8vICAgIGJhbGFuY2UgPSBNYXRoLm1heCgwLCBiYWxhbmNlKVxuICAgIC8vfVxuICAgICQoXCIjYmFsYW5jZVwiKS50ZXh0KGBCYWxhbmNlOiAkJHtiYWxhbmNlLnRvRml4ZWQoMil9ICsgJDIuMGApXG4gICAgJChcIiNyZXN1bHRfc3BhblwiKS5odG1sKG1lc3NhZ2UpXG4gICAgLy8kKFwiI2J1dHRvbl9uZXh0XCIpLnNob3coKVxuICAgICQoXCIjcmVzdWx0X3NwYW5cIikuc2hvdygpXG4gICAgLy8kKFwiI2J1dHRvbl9wbGFjZV9iZXRcIikuaGlkZSgpXG4gICAgaWYgKHNraXBfdHJ1c3RfcmVwb3J0aW5nKSAgIHtcbiAgICAgICAgJChcIiNidXR0b25fbmV4dFwiKS5zaG93KClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICQoXCIjdXNlcl90cnVzdF9yZXBvcnRfZGl2XCIpLnNob3coKVxuICAgIH1cblxuICAgIC8vdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSA9IGF3YWl0IGdldF90cnVzdF9lZmZlY3QoKVxuXG4gICAgLy8kKCcjcmFuZ2VfdmFsJykuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxufVxuXG4vLyQoXCIjYnV0dG9uX3BsYWNlX2JldFwiKS5vbihcImNsaWNrXCIsIHNob3dfcmVzdWx0KVxuXG5mdW5jdGlvbiBzdGFydF90aW1lcl9mb3JfaW5pdGlhbF9kZWNpc2lvbigpIHtcbiAgICBzdGFydFRpbWVyKDEwLCBpbml0aWFsX3VzZXJfZGVjaXNpb25fZGl2LCBidXR0b25zX2luaXRpYWxkZWNpc2lvbiwgbnVsbCwgXCJQbGVhc2UgcmVhZCB0aGUgc3ltcHRvbXMgYW5kIG9wdGlvbnMgY2xvc2VseS5cIilcbn1cblxuXG5mdW5jdGlvbiBuZXh0X3F1ZXN0aW9uKCkge1xuICAgIC8vIHJlc3RvcmUgcHJldmlvdXMgc3RhdGUgb2YgVUlcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA0OyBpKyspIHtcbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoYCNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uJHtpfWApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoYCNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICB9XG5cbiAgICAkKFwiI2FpX2Fzc2lzdGFuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjZmluYWxfdXNlcl9kZWNpc2lvbl9kaXZcIikuaGlkZSgpXG4gICAgJChcIiNmaW5hbF91c2VyX2NvbmZpZGVuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoJyNyYW5nZV92YWwnKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI3VzZXJfdHJ1c3RfcmVwb3J0X2RpdlwiKS5oaWRlKClcbiAgICAkKFwiI2J1dHRvbl9wbGFjZV9iZXRcIikuaGlkZSgpXG4gICAgJChcIiNidXR0b25fbmV4dFwiKS5oaWRlKClcbiAgICAkKFwiI3Jlc3VsdF9zcGFuXCIpLmhpZGUoKVxuICAgIGlmIChxdWVzdGlvbl9pID09IC0xKSB7XG4gICAgICAgICQoXCIjcmFuZ2VfdGV4dFwiKS50ZXh0KFwiLVwiKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJChcIiNyYW5nZV90ZXh0XCIpLnRleHQoYEJlZm9yZSB0aGlzIGludGVyYWN0aW9uLCB5b3VyIHRydXN0IGluIHRoZSBBSTogJHt1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsICogMTB9IC8gMTAwLmApXG4gICAgfVxuICAgICQoXCIjcmFuZ2VfdmFsXCIpLnZhbCh1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsKVxuICAgIHByZXZfdXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCA9IHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWxcblxuICAgIHF1ZXN0aW9uX2kgKz0gMVxuICAgIGlmIChxdWVzdGlvbl9pID49IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICQoXCIjbWFpbl9ib3hfZXhwZXJpbWVudFwiKS5oaWRlKClcbiAgICAgICAgaWYgKE1PQ0tNT0RFKSB7XG4gICAgICAgICAgICAkKFwiI21haW5fYm94X2VuZF9tb2NrXCIpLnNob3coKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChcIiNtYWluX2JveF9lbmRcIikuc2hvdygpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHF1ZXN0aW9uID0gZGF0YVtxdWVzdGlvbl9pXVxuXG4gICAgJChcIiNxdWVzdGlvbl9zcGFuXCIpLmh0bWwocXVlc3Rpb24hW1wicXVlc3Rpb25cIl0pXG4gICAgJChcIiNvcHRpb24xX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJvcHRpb24xXCJdKVxuICAgICQoXCIjb3B0aW9uMl9zcGFuXCIpLmh0bWwocXVlc3Rpb24hW1wib3B0aW9uMlwiXSlcbiAgICAkKFwiI29wdGlvbjNfc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcIm9wdGlvbjNcIl0pXG4gICAgJChcIiNvcHRpb240X3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJvcHRpb240XCJdKVxuICAgIC8vJChcIiNhaV9wcmVkaWN0aW9uX3NwYW5cIikuaHRtbChcIk9wdGlvbiBcIiArIHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0pXG4gICAgLy8kKFwiI2FpX2NvbmZpZGVuY2Vfc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0pXG5cbiAgICAvLyBzZXQgYmV0IHZhbHVlIHJhdGlvXG4gICAgaWYocXVlc3Rpb24uaGFzT3duUHJvcGVydHkoXCJyZXdhcmRfcmF0aW9cIikpIHtcbiAgICAgICAgbGV0IFtyYXRpbzEsIHJhdGlvMl0gPSBxdWVzdGlvbltcInJld2FyZF9yYXRpb1wiXVxuICAgICAgICByYXRpbzEgPSBOdW1iZXIocmF0aW8xKVxuICAgICAgICByYXRpbzIgPSBOdW1iZXIocmF0aW8yKVxuICAgICAgICBiZXRfdmFsX3JhdGlvID0gcmF0aW8xL3JhdGlvMlxuICAgIH0gZWxzZSB7XG4gICAgICAgIGJldF92YWxfcmF0aW8gPSAxXG4gICAgfVxuXG4gICAgdGltZV9xdWVzdGlvbl9zdGFydCA9IERhdGUubm93KClcbiAgICAkKFwiI3Byb2dyZXNzXCIpLnRleHQoYFByb2dyZXNzOiAke3F1ZXN0aW9uX2kgKyAxfSAvICR7ZGF0YS5sZW5ndGh9YClcblxuICAgIHN0YXJ0X3RpbWVyX2Zvcl9pbml0aWFsX2RlY2lzaW9uKClcbn1cblxuLy8gZ2V0IHVzZXIgaWQgYW5kIGxvYWQgcXVldWVcbi8vIHRyeSB0byBzZWUgaWYgc3RhcnQgb3ZlcnJpZGUgd2FzIHBhc3NlZFxuY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbmNvbnN0IHN0YXJ0T3ZlcnJpZGUgPSB1cmxQYXJhbXMuZ2V0KCdzdGFydCcpO1xuY29uc3QgVUlERnJvbVVSTCA9IHVybFBhcmFtcy5nZXQoXCJ1aWRcIilcbmdsb2JhbFRoaXMudXJsX2RhdGEgPSBwYXJhbXNUb09iamVjdCh1cmxQYXJhbXMuZW50cmllcygpKVxuXG5pZiAoVUlERnJvbVVSTCAhPSBudWxsKSB7XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBVSURGcm9tVVJMIGFzIHN0cmluZ1xuICAgIGlmIChnbG9iYWxUaGlzLnVpZCA9PSBcInByb2xpZmljX3JhbmRvbVwiKSB7XG4gICAgICAgIGxldCBxdWV1ZV9pZCA9IGAke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKX1gLnBhZFN0YXJ0KDMsIFwiMFwiKVxuICAgICAgICBnbG9iYWxUaGlzLnVpZCA9IGAke3VybFBhcmFtcy5nZXQoXCJwcm9saWZpY19xdWV1ZV9uYW1lXCIpfS8ke3F1ZXVlX2lkfWBcbiAgICB9XG59IGVsc2UgaWYgKERFVk1PREUpIHtcbiAgICBnbG9iYWxUaGlzLnVpZCA9IFwiZGVtb1wiXG59IGVsc2Uge1xuICAgIGxldCBVSURfbWF5YmU6IGFueSA9IG51bGxcbiAgICB3aGlsZSAoVUlEX21heWJlID09IG51bGwpIHtcbiAgICAgICAgVUlEX21heWJlID0gcHJvbXB0KFwiRW50ZXIgeW91ciB1c2VyIGlkLiBQbGVhc2UgZ2V0IGluIHRvdWNoIGlmIHlvdSB3ZXJlIG5vdCBhc3NpZ25lZCBhbiBpZCBidXQgd2lzaCB0byBwYXJ0aWNpcGF0ZSBpbiB0aGlzIGV4cGVyaW1lbnQuXCIpXG4gICAgfVxuICAgIGdsb2JhbFRoaXMudWlkID0gVUlEX21heWJlIVxufVxuXG5cbmxldCBpbnRlcnZlbnRpb25fYWxsb3dlZF90aW1lc3RlcHM6IG51bWJlcltdID0gW11cbmlmIChnbG9iYWxUaGlzLnVpZC5pbmNsdWRlcyhcIjM0M1wiKSkge1xuICAgIGludGVydmVudGlvbl9hbGxvd2VkX3RpbWVzdGVwcyA9IFs3LCA4LCA5LCAxNywgMTgsIDE5LCAyNywgMjgsIDI5XVxufSBlbHNlIGlmIChnbG9iYWxUaGlzLnVpZC5pbmNsdWRlcyhcIjQzNFwiKSkge1xuICAgIGludGVydmVudGlvbl9hbGxvd2VkX3RpbWVzdGVwcyA9IFs3LCA4LCA5LCAxNywgMTgsIDE5LCAyNywgMjgsIDI5XVxufSBlbHNlIGlmIChnbG9iYWxUaGlzLnVpZC5pbmNsdWRlcyhcIjczNVwiKSkge1xuICAgIGludGVydmVudGlvbl9hbGxvd2VkX3RpbWVzdGVwcyA9IFsxMCwgMTEsIDEyLCAxMywgMTQsIDI1LCAyNiwgMjcsIDI4LCAyOV1cbn1cblxuLy9jb25zdCB2YWxpZEFJSW50ZXJ2ZW50aW9ucyA9IFtcIm5vbmVcIiwgXCJkdW1teVwiLCBcImNvbmZpZGVuY2VfaW5mbGF0aW9uXCIsIFwiY29uZmlkZW5jZV9pbmZsYXRpb25fZml4ZWRcIiwgXCJjb25maWRlbmNlX2RlZmxhdGlvblwiXVxuLy9sZXQgQUlJbnRlcnZlbnRpb25UeXBlID0gdXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl90eXBlXCIpXG4vL2xldCBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl90aHJlc2hvbGRcIikpXG4vL2xldCBJbnRlcnZlbnRpb25GaXhlZENvbmZJbmNyZWFzZSA9IE51bWJlcih1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX2ZpeGVkY29uZmluY3JlYXNlXCIpKVxuY29uc3QgdmFsaWRJbnRlcnZlbnRpb25Hb2FscyA9IFtcIm5vbmVcIiwgXCJtaXRpZ2F0ZV91bmRlcnRydXN0XCIsIFwibWl0aWdhdGVfb3ZlcnRydXN0XCIsIFwibWl0aWdhdGVfdW5kZXJhbmRvdmVydHJ1c3RcIl1cbmxldCBBSUludGVydmVudGlvbkdvYWwgPSB1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX2dvYWxcIilcbmlmIChBSUludGVydmVudGlvbkdvYWwgPT0gbnVsbCkge0FJSW50ZXJ2ZW50aW9uR29hbCA9IFwibm9uZVwifVxuaWYgKCF2YWxpZEludGVydmVudGlvbkdvYWxzLmluY2x1ZGVzKEFJSW50ZXJ2ZW50aW9uR29hbCEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBSSBBc3Npc3RhbmNlIEludGVydmVudGlvbiBHb2FsOiBcIiArIEFJSW50ZXJ2ZW50aW9uR29hbClcbn1cblxuY29uc3QgdmFsaWRJbnRlcnZlbnRpb25UeXBlcyA9IFtcIm5vbmVcIiwgXCJkdW1teVwiLCBcImNvbmZpZGVuY2VfbWFuaXBcIiwgXCJhaV9leHBsYW5hdGlvblwiLCBcImFpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uXCIsIFwiYm90aF9leHBsYW5hdGlvbl90eXBlc1wiXVxubGV0IEFJSW50ZXJ2ZW50aW9uVHlwZSA9IHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fdHlwZVwiKVxuaWYgKEFJSW50ZXJ2ZW50aW9uVHlwZSA9PSBudWxsKSB7QUlJbnRlcnZlbnRpb25UeXBlID0gXCJub25lXCJ9IFxuaWYgKCF2YWxpZEludGVydmVudGlvblR5cGVzLmluY2x1ZGVzKEFJSW50ZXJ2ZW50aW9uVHlwZSEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBSSBBc3Npc3RhbmNlIEludGVydmVudGlvbjogXCIgKyBBSUludGVydmVudGlvblR5cGUpXG59XG5cbmNvbnN0IHZhbGlkSW50ZXJ2ZW50aW9uU3RyYXRlZ2llcyA9IFtcImR1bW15XCIsIFwiZml4ZWRcIiwgXCJhZGFwdGl2ZVwiXVxubGV0IEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPSB1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX3N0cmF0ZWd5XCIpXG5pZiAoQUlJbnRlcnZlbnRpb25TdHJhdGVneSA9PSBudWxsKSB7QUlJbnRlcnZlbnRpb25TdHJhdGVneSA9IFwiZHVtbXlcIn1cbmlmICghdmFsaWRJbnRlcnZlbnRpb25TdHJhdGVnaWVzLmluY2x1ZGVzKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3khKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQUkgQXNzaXN0YW5jZSBJbnRlcnZlbnRpb24gU3RyYXRlZ3k6IFwiICsgQUlJbnRlcnZlbnRpb25TdHJhdGVneSlcbn1cblxuLy8gSW50ZXJ2ZW50aW9uLXNwZWNpZmljIHBhcmFtZXRlcnNcbmxldCBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl90aHJlc2hvbGRcIikpXG5pZiAoSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID09IG51bGwpIHtJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQgPSAtMX1cbmxldCBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCA9IE51bWJlcih1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX3RydXN0X3RocmVzaG9sZFwiKSlcbmlmIChJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCA9PSBudWxsKSB7SW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGQgPSAwfVxubGV0IEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSA9IE51bWJlcih1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX2ZpeGVkY29uZmNoYW5nZVwiKSlcbmlmIChJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UgPT0gbnVsbCkge0ludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSA9IDB9XG5sZXQgSW50ZXJ2ZW50aW9uVW5kZXJ0cnVzdFRocmVzaG9sZCA9IE51bWJlcih1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX3VuZGVydHJ1c3RfdGhyZXNob2xkXCIpKVxuaWYgKEludGVydmVudGlvblVuZGVydHJ1c3RUaHJlc2hvbGQgPT0gbnVsbCkge0ludGVydmVudGlvblVuZGVydHJ1c3RUaHJlc2hvbGQgPSBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZH1cbmxldCBJbnRlcnZlbnRpb25PdmVydHJ1c3RUaHJlc2hvbGQgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl9vdmVydHJ1c3RfdGhyZXNob2xkXCIpKVxuaWYgKEludGVydmVudGlvbk92ZXJ0cnVzdFRocmVzaG9sZCA9PSBudWxsKSB7SW50ZXJ2ZW50aW9uT3ZlcnRydXN0VGhyZXNob2xkID0gSW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGR9XG5cblxubGV0IHVzZVVzZXJSZXBvcnRlZFRydXN0VmFsID0gdXJsUGFyYW1zLmdldChcInVzZV91c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsXCIpID09IFwidHJ1ZVwiXG5pZiAodXNlVXNlclJlcG9ydGVkVHJ1c3RWYWwgPT0gbnVsbCkge3VzZVVzZXJSZXBvcnRlZFRydXN0VmFsID0gZmFsc2V9XG5cbmxldCBza2lwX3RydXN0X3JlcG9ydGluZyA9IHVybFBhcmFtcy5nZXQoXCJza2lwX3RydXN0X3JlcG9ydGluZ1wiKSA9PSBcInRydWVcIlxuaWYgKHNraXBfdHJ1c3RfcmVwb3J0aW5nID09IG51bGwpIHtza2lwX3RydXN0X3JlcG9ydGluZyA9IGZhbHNlfVxuXG5jb25zb2xlLmxvZyhcIkFJSW50ZXJ2ZW50aW9uR29hbDogXCIsIEFJSW50ZXJ2ZW50aW9uR29hbClcbmNvbnNvbGUubG9nKFwiQUlJbnRlcnZlbnRpb25UeXBlOiBcIiwgQUlJbnRlcnZlbnRpb25UeXBlKVxuY29uc29sZS5sb2coXCJBSUludGVydmVudGlvblN0cmF0ZWd5OiBcIiwgQUlJbnRlcnZlbnRpb25TdHJhdGVneSlcbmNvbnNvbGUubG9nKFwiSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkOiBcIiwgSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkKVxuY29uc29sZS5sb2coXCJJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZDogXCIsIEludGVydmVudGlvblRydXN0VGhyZXNob2xkKVxuY29uc29sZS5sb2coXCJJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2U6IFwiLCBJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UpXG5jb25zb2xlLmxvZyhcInVzZVVzZXJSZXBvcnRlZFRydXN0VmFsOiBcIiwgdXNlVXNlclJlcG9ydGVkVHJ1c3RWYWwpXG5jb25zb2xlLmxvZyhcInNraXBfdHJ1c3RfcmVwb3J0aW5nOiBcIiwgc2tpcF90cnVzdF9yZXBvcnRpbmcpXG5cbmlmIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJtaXRpZ2F0ZV91bmRlcnRydXN0XCIpIHtcbiAgICBhc3NlcnQoSW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGQgPD0gMCwgXCJUcnVzdCB0aHJlc2hvbGQgZm9yIG1pdGlnYXRpbmcgdW5kZXJ0cnVzdCBjYW5ub3QgYmUgcG9zaXRpdmUuXCIpXG4gICAgYXNzZXJ0KEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSA+PSAwLCBcIkNvbmZpZGVuY2UgY2hhbmdlIGZvciBtaXRpZ2F0aW5nIHVuZGVydHJ1c3QgY2Fubm90IGJlIG5lZ2F0aXZlLlwiKVxufSBlbHNlIGlmIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJtaXRpZ2F0ZV9vdmVydHJ1c3RcIikge1xuICAgIGFzc2VydChJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCA+PSAwLCBcIlRydXN0IHRocmVzaG9sZCBmb3IgbWl0aWdhdGluZyBvdmVydHJ1c3QgY2Fubm90IGJlIG5lZ2F0aXZlLlwiKVxuICAgIGFzc2VydChJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UgPD0gMCwgXCJDb25maWRlbmNlIGNoYW5nZSBmb3IgbWl0aWdhdGluZyBvdmVydHJ1c3QgY2Fubm90IGJlIHBvc2l0aXZlLlwiKVxufVxuXG5nbG9iYWxUaGlzLnVybF9kYXRhW1wiaW50ZXJ2ZW50aW9uX2dvYWxcIl0gPSBBSUludGVydmVudGlvbkdvYWxcbmdsb2JhbFRoaXMudXJsX2RhdGFbXCJpbnRlcnZlbnRpb25fdHlwZVwiXSA9IEFJSW50ZXJ2ZW50aW9uVHlwZVxuZ2xvYmFsVGhpcy51cmxfZGF0YVtcImludGVydmVudGlvbl9zdHJhdGVneVwiXSA9IEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3lcbmdsb2JhbFRoaXMudXJsX2RhdGFbXCJpbnRlcnZlbnRpb25fdGhyZXNob2xkXCJdID0gSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkXG5nbG9iYWxUaGlzLnVybF9kYXRhW1wiaW50ZXJ2ZW50aW9uX2ZpeGVkY29uZmNoYW5nZVwiXSA9IEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZVxuZ2xvYmFsVGhpcy51cmxfZGF0YVtcInVzZV91c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsXCJdID0gdXNlVXNlclJlcG9ydGVkVHJ1c3RWYWxcblxuLy8gdmVyc2lvbiBmb3IgcGFwZXJcbmlmIChnbG9iYWxUaGlzLnVpZC5zdGFydHNXaXRoKFwiZGVtb19wYXBlclwiKSkge1xuICAgIE1PQ0tNT0RFID0gdHJ1ZVxufSBlbHNlIHtcblxufVxuY29uc29sZS5sb2coXCJSdW5uaW5nIHdpdGggVUlEXCIsIGdsb2JhbFRoaXMudWlkKVxubG9hZF9kYXRhKCkuY2F0Y2goKF9lcnJvcikgPT4ge1xuICAgIC8vYWxlcnQoXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coXCJJbnZhbGlkIHVzZXIgaWQuXCIpXG4gICAgY29uc29sZS5sb2coZ2xvYmFsVGhpcy51aWQhKVxuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuKS50aGVuKChuZXdfZGF0YSkgPT4ge1xuICAgIGRhdGEgPSBuZXdfZGF0YVxuICAgIGlmIChzdGFydE92ZXJyaWRlICE9IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25faSA9IHBhcnNlSW50KHN0YXJ0T3ZlcnJpZGUpIC0gMVxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGZyb21cIiwgcXVlc3Rpb25faSlcbiAgICB9XG4gICAgLy8gbmV4dF9xdWVzdGlvbigpXG4gICAgbmV4dF9pbnN0cnVjdGlvbnMoMClcbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5zaG93KClcbiAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG59KVxuXG5jb25zb2xlLmxvZyhcIlN0YXJ0aW5nIHNlc3Npb24gd2l0aCBVSUQ6XCIsIGdsb2JhbFRoaXMudWlkISlcblxubGV0IGFsZXJ0X2FjdGl2ZSA9IGZhbHNlXG5kb2N1bWVudC5vbnZpc2liaWxpdHljaGFuZ2UgPSAoKSA9PiB7XG4gICAgaWYgKCFhbGVydF9hY3RpdmUpIHtcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgKz0gMVxuICAgICAgICBhbGVydF9hY3RpdmUgPSB0cnVlXG4gICAgICAgIGlmICghKGdsb2JhbFRoaXMudWlkIS5zdGFydHNXaXRoKFwiZGVtb1wiKSkgJiYgIShERVZNT0RFKSkge1xuICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgZG9uJ3QgbGVhdmUgdGhlIHBhZ2UuIElmIHlvdSBkbyBzbyBhZ2Fpbiwgd2UgbWF5IHJlc3RyaWN0IHBheWluZyB5b3UuXCIpXG4gICAgICAgIH1cbiAgICAgICAgYWxlcnRfYWN0aXZlID0gZmFsc2VcbiAgICB9XG59Il0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU0VSVkVSX0xPR19ST09UIiwiYWN0aXZlVGltZXIiLCJzdGFydFRpbWVyIiwiZHVyYXRpb24iLCJzdGVwRGl2IiwiYnV0dG9ucyIsImNhbGxiYWNrIiwibWVzc2FnZSIsImNsZWFySW50ZXJ2YWwiLCJmb3JFYWNoIiwiYnV0dG9uIiwic2V0QXR0cmlidXRlIiwidGltZXJEaXNwbGF5IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJzdHlsZSIsImZvbnRXZWlnaHQiLCJtYXJnaW5Ub3AiLCJhcHBlbmRDaGlsZCIsInJlbWFpbmluZ1RpbWUiLCJ0ZXh0Q29udGVudCIsInNldEludGVydmFsIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJNT0NLTU9ERSIsImRhdGEiLCJ0aW1lX3F1ZXN0aW9uX3N0YXJ0IiwidGltZV9maW5hbF9kZWNpc2lvbl9zdGFydCIsInRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQiLCJ0aW1lX2luaXRpYWxfY29uZmlkZW5jZV9zdGFydCIsInRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydCIsInF1ZXN0aW9uX2kiLCJxdWVzdGlvbiIsImluaXRpYWxfdXNlcl9kZWNpc2lvbiIsImZpbmFsX3VzZXJfZGVjaXNpb24iLCJpbml0aWFsX3VzZXJfY29uZmlkZW5jZSIsImZpbmFsX3VzZXJfY29uZmlkZW5jZSIsImJhbGFuY2UiLCJ1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsIiwicHJldl91c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsIiwiYmV0X3ZhbF9yYXRpbyIsImluc3RydWN0aW9uX2kiLCJjb3VudF9leGl0ZWRfcGFnZSIsImludGVydmVudGlvbl9kZXRhaWxzIiwidHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSIsImJ1dHRvbnNfaW5pdGlhbGRlY2lzaW9uIiwiZ2V0RWxlbWVudEJ5SWQiLCJidXR0b25zX2ZpbmFsZGVjaXNpb24iLCJpbml0aWFsX3VzZXJfZGVjaXNpb25fZGl2IiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwibmV4dF9pbnN0cnVjdGlvbnMiLCJpbmNyZW1lbnQiLCIkIiwiYXR0ciIsInJlbW92ZUF0dHIiLCJzaG93IiwidmFsIiwiaGlkZSIsIm5leHRfcXVlc3Rpb24iLCJjaGlsZHJlbiIsImVhY2giLCJfIiwiZWwiLCJtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbiIsIm9wdGlvbiIsIkRhdGUiLCJub3ciLCJpIiwiY29uc29sZSIsImxvZyIsImdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZSIsImNvbmZfbGV2ZWwiLCJhc3luYyIsImRpc3BsYXllZF9haV9jb25maWRlbmNlIiwidXNlcl9jdXJyZW50X3RydXN0X2xldmVsIiwidXNlVXNlclJlcG9ydGVkVHJ1c3RWYWwiLCJBSUludGVydmVudGlvblR5cGUiLCJBSUludGVydmVudGlvbkdvYWwiLCJJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCIsIkFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kiLCJhaV9jb25maWRlbmNlIiwiTnVtYmVyIiwicmVwbGFjZSIsIm5ld19jb25maWRlbmNlIiwiTWF0aCIsIm1pbiIsIkludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSIsIm1heCIsIlN0cmluZyIsInRvRml4ZWQiLCJjb25maWRlbmNlX2NoYW5nZSIsImV4cGxhbmF0aW9uX3Nob3duIiwiaHRtbCIsIkludGVydmVudGlvblVuZGVydHJ1c3RUaHJlc2hvbGQiLCJJbnRlcnZlbnRpb25PdmVydHJ1c3RUaHJlc2hvbGQiLCJnZXRfYWlfYXNzaXN0YW5jZSIsIm1ha2VfZmluYWxfdXNlcl9kZWNpc2lvbiIsImdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UiLCJjb3JyZWN0X29wdGlvbiIsImNvcnJlY3Rfb3B0aW9uX3N0ciIsInVzZXJfaXNfY29ycmVjdCIsImFpX2lzX2NvcnJlY3QiLCJ0ZXh0Iiwic2tpcF90cnVzdF9yZXBvcnRpbmciLCJzaG93X3Jlc3VsdCIsImxlbmd0aCIsInJhdGlvMSIsInJhdGlvMiIsIm9uIiwibG9nZ2VkX2RhdGEiLCJnbG9iYWxUaGlzIiwidXJsX2RhdGEiLCJ1aWQiLCJhamF4IiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2plY3QiLCJwYXlsb2FkIiwidHlwZSIsImNvbnRlbnRUeXBlIiwiZSIsImxvZ19kYXRhIiwidGhpcyIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsIndpbmRvdyIsImxvY2F0aW9uIiwic2VhcmNoIiwic3RhcnRPdmVycmlkZSIsIlVJREZyb21VUkwiLCJlbnRyaWVzIiwicmVzdWx0IiwidmFsdWUiLCJwYXJhbXNUb09iamVjdCIsInF1ZXVlX2lkIiwiZmxvb3IiLCJyYW5kb20iLCJwYWRTdGFydCIsIlVJRF9tYXliZSIsInByb21wdCIsImludGVydmVudGlvbl9hbGxvd2VkX3RpbWVzdGVwcyIsImluY2x1ZGVzIiwiRXJyb3IiLCJJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQiLCJzdGFydHNXaXRoIiwiZ2V0SlNPTiIsImxvYWRfZGF0YSIsImNhdGNoIiwiX2Vycm9yIiwicmVsb2FkIiwidGhlbiIsIm5ld19kYXRhIiwicGFyc2VJbnQiLCJhbGVydF9hY3RpdmUiLCJvbnZpc2liaWxpdHljaGFuZ2UiLCJhbGVydCJdLCJzb3VyY2VSb290IjoiIn0=