(()=>{"use strict";var e={d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o:()=>i});let t="https://tejassrinivasan.pythonanywhere.com/";var i=!1;let n="https://tejassrinivasan.pythonanywhere.com/",o="user_acceptance_model-logisticregression-0.9347testf1";var c=[];let a,l,_,r,s,d=-1,u=null,p=-1,f=-1,h=-1,b=-1,g=0,v=5,m=1,w=0,k=0,y=0;var A={},x={},O={};let T;function I(e,t){if(!e)throw t||"Assertion failed"}function N(e){w+=e,0==w?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),w>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==w&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),J()),$("#main_box_instructions").children(":not(input)").each(((e,t)=>{$(t).hide()})),$(`#instructions_${w}`).show()}function S(e){r=Date.now(),p=e,I(1==e||2==e||3==e||4==e,"Invalid option!"),$(`#button_initial_decision_option${e}`).attr("activedecision","true");for(let t=1;t<=4;t++)t!=e&&$(`#button_initial_decision_option${t}`).removeAttr("activedecision"),$(`#button_initial_decision_option${t}`).attr("disabled","true");console.log("User's initial decision: Option ",e),$("#initial_user_confidence_div").show(),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function j(e){l=Date.now(),h=e,I(1==e||2==e||3==e,"Invalid option!");for(let t=1;t<=3;t++)t!=e&&$(`#button_initial_confidence_option${t}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${t}`).attr("disabled","true");$(`#button_initial_confidence_option${e}`).attr("activedecision","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_decision_option3").removeAttr("disabled"),$("#button_final_decision_option4").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let e="AI is figuring out its confidence...",t=y;if(B&&(t=(v-5)/2.5,console.log("Using user reported trust value: ",v)),"none"==F)e=u.ai_confidence;else if("dummy"==F){let t=await async function(){let e=Number(p==u.ai_prediction),t=h,i=Number(u.ai_confidence.replace("%",""))/100,c=y;B&&(c=(v-5)/2.5);let a,l={user_ai_initial_agreement:e,user_initial_confidence:t,ai_confidence:i,user_current_trust_level:c,timestep:d};try{a=await $.ajax(n+"get_user_decision_prob",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(l)}),type:"POST",contentType:"application/json"})}catch(e){console.log("ERROR!"),console.log(e)}return{user_decision_model_inputs:l,user_acceptance_likelihood:a.pred_probs[0][1]}}(),i=t.user_acceptance_likelihood;console.log("User decision model inputs: ",t.user_decision_model_inputs),console.log("User's likelihood of going with the AI's prediction: ",i),e=u.ai_confidence,x={user_decision_model_inputs:t.user_decision_model_inputs,acceptance_likelihood:i}}else if("confidence_inflation"==F)if(t<0){let i=await D(),n=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",n);let o=i.neutral_trust.acceptance_likelihood,c=!1;n>Y?(c=!0,T=await R(o),e=String((100*T.new_conf_to_display).toFixed(0))+"%",x={acceptance_likelihood_results:i,findnewconf_results:T,current_trust_level:t,conf_actual:u.ai_confidence,conf_new:e,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,"acceptance_likelihood-newconf_actualtrust":T.new_conf_acceptance_likelihood,intervention_applied:!0}):(e=u.ai_confidence,c=!1,x={acceptance_likelihood_results:i,current_trust_level:t,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!1})}else e=u.ai_confidence,x={intervention_applied:!1};else if("confidence_inflation_fixed"==F)if(t<0&&p!=u.ai_prediction){let i=await D(),n=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",n);let o=Number(u.ai_confidence.replace("%",""))/100,c=Math.min(1,o+M);e=String((100*c).toFixed(0))+"%",x={acceptance_likelihood_results:i,current_trust_level:t,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!0}}else e=u.ai_confidence,x={intervention_applied:!1};else if("confidence_deflation"==F)if(t>0){let i=await D(),n=i.al_diff;console.log("User's likelihood of going with the AI's prediction: ",i.actual_trust.acceptance_likelihood),console.log("User's likelihood of going with the AI's prediction with neutral trust: ",i.neutral_trust.acceptance_likelihood),console.log("Acceptance Likelihood Diff: ",n);let o=i.neutral_trust.acceptance_likelihood,c=!1;if(n>Y){c=!0;let n=await R(o);e=String((100*n.new_conf_to_display).toFixed(0))+"%",x={acceptance_likelihood_results:i,findnewconf_results:n,current_trust_level:t,conf_actual:u.ai_confidence,conf_new:e,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,"acceptance_likelihood-newconf_actualtrust":n.new_conf_acceptance_likelihood,intervention_applied:!0}}else e=u.ai_confidence,c=!1,x={acceptance_likelihood_results:i,current_trust_level:t,conf_actual:u.ai_confidence,"acceptance_likelihood-actualconf_actualtrust":i.actual_trust.acceptance_likelihood,"acceptance_likelihood-actualconf_neutraltrust":i.neutral_trust.acceptance_likelihood,intervention_applied:!1}}else e=u.ai_confidence,x={intervention_applied:!1};x.trust_level_at_start_of_interaction=t,A={intervention_type:F,actual_ai_confidence:u.ai_confidence,displayed_ai_confidence:e,intervention_details:x},console.log("AI Assistance Intervention Data: ",A),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(e),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}async function D(){let e=Number(p==u.ai_prediction),t=h,i=Number(u.ai_confidence.replace("%",""))/100,c=y;B&&(c=(v-5)/2.5);let a,l={user_ai_initial_agreement:e,user_initial_confidence:t,ai_confidence:i,user_current_trust_level:c,timestep:d};console.log("User decision model inputs: ",l);try{a=await $.ajax(n+"examine_effect_of_trust_on_decision_making",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(l)}),type:"POST",contentType:"application/json"})}catch(e){console.log("ERROR!"),console.log(e)}return a}async function R(e){let t=Number(p==u.ai_prediction),i=h,c=(Number(u.ai_confidence.replace("%","")),y);B&&(c=(v-5)/2.5);let a={user_ai_initial_agreement:t,user_initial_confidence:i,user_current_trust_level:c,timestep:d,user_acceptance_likelihood_neutral_trust:e};try{T=await $.ajax(n+"find_best_aiconf_to_display",{data:JSON.stringify({project:"2step-trust-study",model_name:o,payload:JSON.stringify(a)}),type:"POST",contentType:"application/json"})}catch(e){console.log("ERROR!"),console.log(e)}return T}function U(e){s=Date.now(),f=e,I(1==e||2==e||3==e||4==e,"Invalid option!");for(let t=1;t<=4;t++)t!=e&&$(`#button_final_decision_option${t}`).removeAttr("activedecision"),$(`#button_final_decision_option${t}`).attr("disabled","true");$(`#button_final_decision_option${e}`).attr("activedecision","true"),$("#final_user_confidence_div").show(),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function P(e){_=Date.now(),b=e,I(1==e||2==e||3==e,"Invalid option!");for(let t=1;t<=3;t++)t!=e&&$(`#button_final_confidence_option${t}`).removeAttr("activedecision"),$(`#button_final_confidence_option${t}`).attr("disabled","true");$(`#button_final_confidence_option${e}`).attr("activedecision","true"),async function(){let e=u.correct_option,t=u[`option${e}`],i=e==f,o=u.ai_is_correct,c="Correct answer: <b>Option "+e+": "+t+"</b>.<br>";c+=i?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",c+=o?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(c+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",g+=.2):c+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",c+="<br>",$("#balance").text(`Balance: $${g.toFixed(2)} + $2.0`),$("#result_span").html(c),$("#result_span").show(),$("#how_confident_div").show(),O=await async function(){let e,t={initial_user_correctness:Number(p==u.correct_option),ai_correctness:Number(u.ai_prediction==u.correct_option),final_user_correctness:Number(f==u.correct_option),ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:y,timestep:d};console.log("Trust effect inputs: ",t);try{e=await $.ajax(n+"get_trust_effect",{data:JSON.stringify({project:"2step-trust-study",model_name:"trust_effect_model-svm_linear-0.4644testmae-0.9095testteda",payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(e){console.log("ERROR!"),console.log(e)}console.log("Trust effect prediction result: ",e);let i=await e.trust_effect;return y+=i,O={model_inputs:t,predicted_trust_effect:i,user_new_trust_level:y}}()}()}function J(){for(let e=1;e<=4;e++)$(`#button_initial_decision_option${e}`).removeAttr("activedecision"),$(`#button_initial_decision_option${e}`).removeAttr("disabled"),$(`#button_final_decision_option${e}`).removeAttr("activedecision"),$(`#button_final_decision_option${e}`).removeAttr("disabled");for(let e=1;e<=3;e++)$(`#button_initial_confidence_option${e}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${e}`).removeAttr("disabled"),$(`#button_final_confidence_option${e}`).removeAttr("activedecision"),$(`#button_final_confidence_option${e}`).removeAttr("disabled");if($("#ai_assistance_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#how_confident_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*v} / 100.`),$("#range_val").val(v),d+=1,d>=c.length)return $("#main_box_experiment").hide(),void(i?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=c[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),$("#option3_span").html(u.option3),$("#option4_span").html(u.option4),u.hasOwnProperty("reward_ratio")){let[e,t]=u.reward_ratio;e=Number(e),t=Number(t),m=e/t}else m=1;a=Date.now(),$("#progress").text(`Progress: ${d+1} / ${c.length}`)}$("#button_instructions_next").on("click",(()=>N(1))),$("#button_instructions_prev").on("click",(()=>N(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let e={question_i:d,user_balance_post_interaction:g,user_trust_val:v,initial_user_decision:p,final_user_decision:f,initial_user_confidence:h,final_user_confidence:b};e.times={initial_decision:r-a,initial_confidence:l-r,final_decision:s-l,final_confidence:_-s,trust_decision:Date.now()-_},e.question=u,e.count_exited_page=k,e.ai_assistance_intervention_data=A,e.trust_effect_prediction_data=O,async function(e){if(i)console.log("logged (mock)",e);else{e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="trialrun_studies"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{return await $.ajax(t+"log",{data:JSON.stringify({project:"2step-trust-study-interventions/"+e.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"})}catch(e){console.log(e)}}}(e),k=0}J()})),$("#range_val").on("input change",(function(){v=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*v} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>S(1))),$("#button_initial_decision_option2").on("click",(()=>S(2))),$("#button_initial_decision_option3").on("click",(()=>S(3))),$("#button_initial_decision_option4").on("click",(()=>S(4))),$("#button_initial_confidence_option1").on("click",(()=>j(1))),$("#button_initial_confidence_option2").on("click",(()=>j(2))),$("#button_initial_confidence_option3").on("click",(()=>j(3))),$("#button_final_decision_option1").on("click",(()=>U(1))),$("#button_final_decision_option2").on("click",(()=>U(2))),$("#button_final_decision_option3").on("click",(()=>U(3))),$("#button_final_decision_option4").on("click",(()=>U(4))),$("#button_final_confidence_option1").on("click",(()=>P(1))),$("#button_final_confidence_option2").on("click",(()=>P(2))),$("#button_final_confidence_option3").on("click",(()=>P(3)));const q=new URLSearchParams(window.location.search),E=q.get("start"),L=q.get("uid");if(globalThis.url_data=function(e){const t={};for(const[i,n]of e)t[i]=n;return t}(q.entries()),null!=L){if(globalThis.uid=L,"prolific_random"==globalThis.uid){let e=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${q.get("prolific_queue_name")}/${e}`}}else{let e=null;for(;null==e;)e=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=e}let F=q.get("intervention_type"),Y=Number(q.get("intervention_threshold")),M=Number(q.get("intervention_fixedconfincrease")),B="true"==q.get("use_user_reported_trust_level");if(null==F&&(F="none"),null==Y&&(Y=-1),null==M&&(M=0),null==B&&(B=!1),!["none","dummy","confidence_inflation","confidence_inflation_fixed","confidence_deflation"].includes(F))throw new Error("Invalid AI Assistance Intervention: "+F);globalThis.url_data.intervention_type=F,globalThis.url_data.intervention_threshold=Y,globalThis.uid.startsWith("demo_paper")&&(i=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((e=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((e=>{c=e,null!=E&&(d=parseInt(E)-1,console.log("Starting from",d)),N(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let W=!1;document.onvisibilitychange=()=>{W||(k+=1,W=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),W=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,