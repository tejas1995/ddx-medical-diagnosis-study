(()=>{"use strict";var t={d:(n,i)=>{for(var e in i)t.o(i,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:i[e]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)};t.d({},{o:()=>o});let n="https://tejassrinivasan.pythonanywhere.com/",i=null;function e(t,n,e,o,a){i&&(clearInterval(i),i=null),e.forEach((t=>t.setAttribute("disabled","true")));let l=document.createElement("div");l.id=`timer_${n.id}`,l.style.fontWeight="bold",l.style.marginTop="10px",n.appendChild(l);let r=t;l.textContent=a+` You can make your selection in ${r} second(s).`,i=setInterval((()=>{r--,r>=0?l.textContent=a+` You can make your selection in ${r} second(s).`:(null!==i&&(clearInterval(i),i=null),i=null,n.removeChild(l),e.forEach((t=>t.removeAttribute("disabled"))),o&&o())}),1e3)}var o=!1;var a=[];let l,r,s,c,_,d=-1,u=null,p=-1,f=-1,g=-1,b=-1,v=0,h=5,m=1,y=0,x=0,w=0;var A={},I={},T={};function k(t,n){if(!t)throw n||"Assertion failed"}function E(t){y+=t,0==y?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),y>=6?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),7==y&&($("#main_box_instructions").hide(),$("#main_box_experiment").show(),C()),$("#main_box_instructions").children(":not(input)").each(((t,n)=>{$(n).hide()})),$(`#instructions_${y}`).show()}function N(t){c=Date.now(),p=t,k(1==t||2==t||3==t||4==t,"Invalid option!"),$(`#button_initial_decision_option${t}`).attr("activedecision","true");for(let n=1;n<=4;n++)n!=t&&$(`#button_initial_decision_option${n}`).removeAttr("activedecision"),$(`#button_initial_decision_option${n}`).attr("disabled","true");console.log("User's initial decision: Option ",t),$("#initial_user_confidence_div").show(),$("#button_initial_confidence_option1").removeAttr("disabled"),$("#button_initial_confidence_option2").removeAttr("disabled"),$("#button_initial_confidence_option3").removeAttr("disabled")}function O(t){r=Date.now(),g=t,k(1==t||2==t||3==t,"Invalid option!");for(let n=1;n<=3;n++)n!=t&&$(`#button_initial_confidence_option${n}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${n}`).attr("disabled","true");$(`#button_initial_confidence_option${t}`).attr("activedecision","true"),$("#button_final_decision_option1").removeAttr("disabled"),$("#button_final_decision_option2").removeAttr("disabled"),$("#button_final_decision_option3").removeAttr("disabled"),$("#button_final_decision_option4").removeAttr("disabled"),async function(){console.log("Getting AI assistance...");let t=u.ai_confidence,n=w;if(G&&(n=(h-5)/2.5,console.log("Using user reported trust value: ",h)),I={intervention_applied:!1,trust_level_at_start_of_interaction:n},"none"==U||p==u.ai_prediction)console.log("Not applying any intervention."),t=u.ai_confidence;else if("confidence_manip"==U)if("none"==R||"mitigate_undertrust"==R&&n<F||"mitigate_overtrust"==R&&n>F){if(console.log("Applying AI confidence manipulation intervention."),"fixed"==Y){let n=Number(u.ai_confidence.replace("%",""))/100,i=Math.min(1,n+M);i=Math.max(.5,i),t=String((100*i).toFixed(0))+"%";let e=(i-n).toFixed(2);console.log("Actual AI confidence: ",u.ai_confidence,", Confidence shown to user: ",t),I.conf_actual=u.ai_confidence,I.conf_displayed=t,I.conf_change=e,I.intervention_applied=!0}}else console.log("Conditions for applying 'confidence manipulation' intervention not satisfied.");else if("ai_explanation"==U)if("none"==R||"mitigate_undertrust"==R&&n<F||"mitigate_overtrust"==R&&n>F){if(console.log("Applying AI explanation intervention."),"fixed"==Y){console.log("Showing explanation");let t=u.ai_explanation?u.ai_explanation:"No explanation provided";$("#ai_explanation_span").html(t),$("#ai_explanation_div").show(),I.explanation_shown=t,I.intervention_applied=!0,e(15,document.getElementById("ai_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");else if("ai_contrastive_explanation"==U)if("none"==R||"mitigate_undertrust"==R&&n<F||"mitigate_overtrust"==R&&n>F){if(console.log("Applying AI explanation intervention."),"fixed"==Y){console.log("Showing explanation");let t=u.ai_contrastive_explanation?u.ai_contrastive_explanation:"No explanation provided";$("#ai_contrastive_explanation_span").html(t),$("#ai_contrastive_explanation_div").show(),I.explanation_shown=t,I.intervention_applied=!0,e(10,document.getElementById("ai_contrastive_explanation_div"),[document.getElementById("button_final_decision_option1"),document.getElementById("button_final_decision_option2")],null,"Please read the explanation.")}}else console.log("Conditions for applying 'AI explanation' intervention not satisfied.");console.log("AI Assistance Intervention Details: ",I),$("#ai_prediction_span").html("Option "+u.ai_prediction),$("#ai_confidence_span").html(t),$("#ai_assistance_div").show(),$("#final_user_decision_div").show()}()}function S(t){_=Date.now(),f=t,k(1==t||2==t||3==t||4==t,"Invalid option!");for(let n=1;n<=4;n++)n!=t&&$(`#button_final_decision_option${n}`).removeAttr("activedecision"),$(`#button_final_decision_option${n}`).attr("disabled","true");$(`#button_final_decision_option${t}`).attr("activedecision","true"),$("#final_user_confidence_div").show(),$("#button_final_confidence_option1").removeAttr("disabled"),$("#button_final_confidence_option2").removeAttr("disabled"),$("#button_final_confidence_option3").removeAttr("disabled")}function B(t){s=Date.now(),b=t,k(1==t||2==t||3==t,"Invalid option!");for(let n=1;n<=3;n++)n!=t&&$(`#button_final_confidence_option${n}`).removeAttr("activedecision"),$(`#button_final_confidence_option${n}`).attr("disabled","true");$(`#button_final_confidence_option${t}`).attr("activedecision","true"),async function(){let t=u.correct_option,n=u[`option${t}`],i=t==f,e=u.ai_is_correct,o="Correct answer: <b>Option "+t+": "+n+"</b>.<br>";o+=i?"You picked Option "+f+", which was <span class='color_correct'><b>correct</b></span>.<br>":"You picked Option "+f+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",o+=e?"The AI picked Option "+u.ai_prediction+", which was <span class='color_correct'><b>correct<b></span>.<br>":"The AI picked Option "+u.ai_prediction+", which was <span class='color_incorrect'><b>incorrect</b></span>.<br>",i?(o+="<span class='color_correct'><b>You receive a reward of $0.10.</b></span>",v+=.1):o+="<span class='color_incorrect'><b>You do not receive any reward.</b></span>",o+="<br>",$("#balance").text(`Balance: $${v.toFixed(2)} + $2.0`),$("#result_span").html(o),$("#result_span").show(),$("#how_confident_div").show(),T=await async function(){let t,n={initial_user_correctness:Number(p==u.correct_option),ai_correctness:Number(u.ai_prediction==u.correct_option),final_user_correctness:Number(f==u.correct_option),ai_confidence:Number(u.ai_confidence.replace("%",""))/100,user_current_trust_level:w,timestep:d};console.log("Trust effect inputs: ",n);try{t=await $.ajax("https://tejassrinivasan.pythonanywhere.com/get_trust_effect",{data:JSON.stringify({project:"medical-diagnosis-study",model_name:"trust_effect_model-svm_linear-0.4644testmae-0.9095testteda",payload:JSON.stringify(n)}),type:"POST",contentType:"application/json"})}catch(t){console.log("ERROR!"),console.log(t)}console.log("Trust effect prediction result: ",t);let i=await t.trust_effect;return w+=i,T={model_inputs:n,predicted_trust_effect:i,user_new_trust_level:w}}()}()}function C(){for(let t=1;t<=4;t++)$(`#button_initial_decision_option${t}`).removeAttr("activedecision"),$(`#button_initial_decision_option${t}`).removeAttr("disabled"),$(`#button_final_decision_option${t}`).removeAttr("activedecision"),$(`#button_final_decision_option${t}`).removeAttr("disabled");for(let t=1;t<=3;t++)$(`#button_initial_confidence_option${t}`).removeAttr("activedecision"),$(`#button_initial_confidence_option${t}`).removeAttr("disabled"),$(`#button_final_confidence_option${t}`).removeAttr("activedecision"),$(`#button_final_confidence_option${t}`).removeAttr("disabled");if($("#ai_assistance_div").hide(),$("#ai_explanation_div").hide(),$("#ai_contrastive_explanation_div").hide(),$("#initial_user_confidence_div").hide(),$("#final_user_decision_div").hide(),$("#final_user_confidence_div").hide(),$("#range_val").removeAttr("disabled"),$("#how_confident_div").hide(),$("#button_place_bet").hide(),$("#button_next").hide(),$("#result_span").hide(),-1==d?$("#range_text").text("-"):$("#range_text").text(`Before this interaction, your trust in the AI: ${10*h} / 100.`),$("#range_val").val(h),d+=1,d>=a.length)return $("#main_box_experiment").hide(),void(o?$("#main_box_end_mock").show():$("#main_box_end").show());if(u=a[d],$("#question_span").html(u.question),$("#option1_span").html(u.option1),$("#option2_span").html(u.option2),$("#option3_span").html(u.option3),$("#option4_span").html(u.option4),u.hasOwnProperty("reward_ratio")){let[t,n]=u.reward_ratio;t=Number(t),n=Number(n),m=t/n}else m=1;l=Date.now(),$("#progress").text(`Progress: ${d+1} / ${a.length}`),e(10,document.getElementById("initial_user_decision_div"),[document.getElementById("button_initial_decision_option1"),document.getElementById("button_initial_decision_option2"),document.getElementById("button_initial_decision_option3"),document.getElementById("button_initial_decision_option4")],null,"Please read the symptoms and options closely.")}$("#button_instructions_next").on("click",(()=>E(1))),$("#button_instructions_prev").on("click",(()=>E(-1))),$("#button_next").on("click",(()=>{if(-1!=d){let t={question_i:d,user_balance_post_interaction:v,user_trust_val:h,initial_user_decision:p,final_user_decision:f,initial_user_confidence:g,final_user_confidence:b};t.times={initial_decision:c-l,initial_confidence:r-c,final_decision:_-r,final_confidence:s-_,trust_decision:Date.now()-s},t.question=u,t.count_exited_page=x,t.ai_assistance_intervention_data=A,t.trust_effect_prediction_data=T,async function(t){if(o)console.log("logged (mock)",t);else{t.url_data=globalThis.url_data,console.log("Data"),"study_id"in t.url_data||(t.url_data.study_id="trialrun_studies"),t.url_data.queue_id=globalThis.uid,console.log("logged",t),console.log("Logging to",n+"log");try{return await $.ajax(n+"log",{data:JSON.stringify({project:"medical-diagnosis-study/"+t.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+t.url_data.prolific_id,payload:JSON.stringify(t)}),type:"POST",contentType:"application/json"})}catch(t){console.log(t)}}}(t),x=0}C()})),$("#range_val").on("input change",(function(){h=$(this).val(),$("#range_text").text(`After this interaction, your current trust in the AI: ${10*h} / 100.`),$("#button_next").show()})),$("#button_initial_decision_option1").on("click",(()=>N(1))),$("#button_initial_decision_option2").on("click",(()=>N(2))),$("#button_initial_decision_option3").on("click",(()=>N(3))),$("#button_initial_decision_option4").on("click",(()=>N(4))),$("#button_initial_confidence_option1").on("click",(()=>O(1))),$("#button_initial_confidence_option2").on("click",(()=>O(2))),$("#button_initial_confidence_option3").on("click",(()=>O(3))),$("#button_final_decision_option1").on("click",(()=>S(1))),$("#button_final_decision_option2").on("click",(()=>S(2))),$("#button_final_decision_option3").on("click",(()=>S(3))),$("#button_final_decision_option4").on("click",(()=>S(4))),$("#button_final_confidence_option1").on("click",(()=>B(1))),$("#button_final_confidence_option2").on("click",(()=>B(2))),$("#button_final_confidence_option3").on("click",(()=>B(3)));const D=new URLSearchParams(window.location.search),P=D.get("start"),j=D.get("uid");if(globalThis.url_data=function(t){const n={};for(const[i,e]of t)n[i]=e;return n}(D.entries()),null!=j){if(globalThis.uid=j,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${D.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}let q=null;globalThis.uid.includes("343")||globalThis.uid.includes("434")?q=[7,8,9,17,18,19,27,28,29]:globalThis.uid.includes("735")&&(q=[10,11,12,13,14,25,26,27,28,29]);let R=D.get("intervention_goal");if(null==R&&(R="none"),!["none","mitigate_undertrust","mitigate_overtrust"].includes(R))throw new Error("Invalid AI Assistance Intervention Goal: "+R);let U=D.get("intervention_type");if(null==U&&(U="none"),!["none","dummy","confidence_manip","ai_explanation","ai_contrastive_explanation"].includes(U))throw new Error("Invalid AI Assistance Intervention: "+U);let Y=D.get("intervention_strategy");if(null==Y&&(Y="dummy"),!["dummy","fixed","adaptive"].includes(Y))throw new Error("Invalid AI Assistance Intervention Strategy: "+Y);let J=Number(D.get("intervention_threshold"));null==J&&(J=-1);let F=Number(D.get("intervention_trust_threshold"));null==F&&(F=0);let M=Number(D.get("intervention_fixedconfchange"));null==M&&(M=0);let G="true"==D.get("use_user_reported_trust_level");null==G&&(G=!1);let L="true"==D.get("skip_trust_reporting");null==L&&(L=!1),console.log("AIInterventionGoal: ",R),console.log("AIInterventionType: ",U),console.log("AIInterventionStrategy: ",Y),console.log("InterventionALDiffThreshold: ",J),console.log("InterventionTrustThreshold: ",F),console.log("InterventionFixedConfChange: ",M),console.log("useUserReportedTrustVal: ",G),console.log("skip_trust_reporting: ",L),"mitigate_undertrust"==R?(k(F<=0,"Trust threshold for mitigating undertrust cannot be positive."),k(M>=0,"Confidence change for mitigating undertrust cannot be negative.")):"mitigate_overtrust"==R&&(k(F>=0,"Trust threshold for mitigating overtrust cannot be negative."),k(M<=0,"Confidence change for mitigating overtrust cannot be positive.")),globalThis.url_data.intervention_goal=R,globalThis.url_data.intervention_type=U,globalThis.url_data.intervention_strategy=Y,globalThis.url_data.intervention_threshold=J,globalThis.url_data.intervention_fixedconfchange=M,globalThis.url_data.use_user_reported_trust_level=G,globalThis.uid.startsWith("demo_paper")&&(o=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{a=t,null!=P&&(d=parseInt(P)-1,console.log("Starting from",d)),E(0),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let W=!1;document.onvisibilitychange=()=>{W||(x+=1,W=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),W=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0UsSUFBSXdCLFdBQVcsZ0JBQzFCMUgsR0FBVyxHQUlmMEMsUUFBUUMsSUFBSSxtQkFBb0JxRCxXQUFXRSxLRjV0QnBDcEQsaUJBS0gsYUFIbUJwQixFQUFFaUcsUUFDakIsZ0JBQWdCM0IsV0FBV0UsY0FBYzNELEtBQUtDLFFBR3RELENFdXRCQW9GLEdBQVlDLE9BQU9DLElBRWZwRixRQUFRQyxJQUFJLG9CQUNaRCxRQUFRQyxJQUFJcUQsV0FBV0UsS0FDdkJLLE9BQU9DLFNBQVN1QixRQUFRLElBRTFCQyxNQUFNQyxJQUNKaEksRUFBT2dJLEVBQ2MsTUFBakJ2QixJQUNBbkcsRUFBYTJILFNBQVN4QixHQUFpQixFQUN2Q2hFLFFBQVFDLElBQUksZ0JBQWlCcEMsSUFHakNpQixFQUFrQixHQUNsQkUsRUFBRSwwQkFBMEJHLE9BQzVCSCxFQUFFLGlDQUFpQ0ssTUFBTSxJQUc3Q1csUUFBUUMsSUFBSSw2QkFBOEJxRCxXQUFXRSxLQUVyRCxJQUFJaUMsR0FBZSxFQUNuQi9JLFNBQVNnSixtQkFBcUIsS0FDckJELElBQ0RsSCxHQUFxQixFQUNyQmtILEdBQWUsRUFDVG5DLFdBQVdFLElBQUt3QixXQUFXLFNBQzdCVyxNQUFNLGdGQUVWRixHQUFlLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29ubmVjdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7IERFVk1PREUgfSBmcm9tICcuL2dsb2JhbHMnXG5pbXBvcnQgeyBNT0NLTU9ERSB9IGZyb20gJy4vbWFpbidcblxubGV0IFNFUlZFUl9MT0dfUk9PVCA9IERFVk1PREUgPyBcImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC9cIiA6IFwiaHR0cHM6Ly90ZWphc3NyaW5pdmFzYW4ucHl0aG9uYW55d2hlcmUuY29tL1wiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkX2RhdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBpbmNsdWRlIHRpbWVzdGFtcCBzbyB0aGF0IHRoaW5ncyBkb24ndCBnZXQgY2FjaGVkXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0ICQuZ2V0SlNPTihcbiAgICAgICAgYGJha2VkX3F1ZXVlcy8ke2dsb2JhbFRoaXMudWlkfS5qc29uP3Q9JHtEYXRlLm5vdygpfWAsXG4gICAgKVxuICAgIHJldHVybiByZXN1bHRcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dfZGF0YShkYXRhKTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoTU9DS01PREUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJsb2dnZWQgKG1vY2spXCIsIGRhdGEpXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGRhdGFbXCJ1cmxfZGF0YVwiXSA9IGdsb2JhbFRoaXMudXJsX2RhdGFcbiAgICBjb25zb2xlLmxvZyhcIkRhdGFcIilcbiAgICBpZiAoIShcInN0dWR5X2lkXCIgaW4gZGF0YVsndXJsX2RhdGEnXSkpIHtcbiAgICAgICAgZGF0YVsndXJsX2RhdGEnXVtcInN0dWR5X2lkXCJdID0gXCJ0cmlhbHJ1bl9zdHVkaWVzXCJcbiAgICB9XG4gICAgZGF0YVtcInVybF9kYXRhXCJdW1wicXVldWVfaWRcIl0gPSBnbG9iYWxUaGlzLnVpZFxuICAgIGNvbnNvbGUubG9nKFwibG9nZ2VkXCIsIGRhdGEpXG4gICAgY29uc29sZS5sb2coXCJMb2dnaW5nIHRvXCIsIFNFUlZFUl9MT0dfUk9PVCArIFwibG9nXCIpXG5cbiAgICB0cnkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgU0VSVkVSX0xPR19ST09UICsgXCJsb2dcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Q6IFwibWVkaWNhbC1kaWFnbm9zaXMtc3R1ZHkvXCIgKyBkYXRhWyd1cmxfZGF0YSddWydzdHVkeV9pZCddLFxuICAgICAgICAgICAgICAgICAgICB1aWQ6IGdsb2JhbFRoaXMudWlkLnJlcGxhY2UoXCIvXCIsIFwiX1wiKSArIFwiX1wiICsgZGF0YVsndXJsX2RhdGEnXVsncHJvbGlmaWNfaWQnXSxcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG59IiwiaW1wb3J0IHsgRU5BQkxFX1RJTUVSIH0gZnJvbSAnLi9nbG9iYWxzJztcblxuZnVuY3Rpb24gcGFyYW1zVG9PYmplY3QoZW50cmllcykge1xuICBjb25zdCByZXN1bHQgPSB7fVxuICAvLyBlYWNoICdlbnRyeScgaXMgYSBba2V5LCB2YWx1ZV0gdHVwcGxlXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmxldCBhY3RpdmVUaW1lcjogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0SW50ZXJ2YWw+IHwgbnVsbCA9IG51bGw7IC8vIFRpbWVyIGludGVydmFsXG5cbmZ1bmN0aW9uIHN0YXJ0VGltZXIoZHVyYXRpb24sIHN0ZXBEaXYsIGJ1dHRvbnMsIGNhbGxiYWNrLCBtZXNzYWdlKSB7XG4gIGlmICghRU5BQkxFX1RJTUVSKSB7XG4gICAgICAvLyBJZiB0aGUgdGltZXIgaXMgZGlzYWJsZWQsIGVuYWJsZSB0aGUgYnV0dG9ucyBpbW1lZGlhdGVseVxuICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIikpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ2xlYXIgYW55IGV4aXN0aW5nIHRpbWVyIHRvIHByZXZlbnQgbXVsdGlwbGUgaW50ZXJ2YWxzXG4gIGlmIChhY3RpdmVUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbChhY3RpdmVUaW1lcik7XG4gICAgICBhY3RpdmVUaW1lciA9IG51bGw7XG4gIH1cblxuICAvLyBEaXNhYmxlIGJ1dHRvbnNcbiAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpKTtcbiAgXG4gIC8vIFNob3cgdGltZXIgdmlzdWFsbHlcbiAgbGV0IHRpbWVyRGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0aW1lckRpc3BsYXkuaWQgPSBgdGltZXJfJHtzdGVwRGl2LmlkfWA7XG4gIHRpbWVyRGlzcGxheS5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuICB0aW1lckRpc3BsYXkuc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xuICBzdGVwRGl2LmFwcGVuZENoaWxkKHRpbWVyRGlzcGxheSk7XG5cbiAgbGV0IHJlbWFpbmluZ1RpbWUgPSBkdXJhdGlvbjtcblxuICAvLyBJbml0aWFsIGRpc3BsYXlcbiAgdGltZXJEaXNwbGF5LnRleHRDb250ZW50ID0gbWVzc2FnZSArIGAgWW91IGNhbiBtYWtlIHlvdXIgc2VsZWN0aW9uIGluICR7cmVtYWluaW5nVGltZX0gc2Vjb25kKHMpLmA7XG5cbiAgYWN0aXZlVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICByZW1haW5pbmdUaW1lLS07XG4gICAgICBpZiAocmVtYWluaW5nVGltZSA+PSAwKSB7XG4gICAgICAgICAgdGltZXJEaXNwbGF5LnRleHRDb250ZW50ID0gbWVzc2FnZSArIGAgWW91IGNhbiBtYWtlIHlvdXIgc2VsZWN0aW9uIGluICR7cmVtYWluaW5nVGltZX0gc2Vjb25kKHMpLmA7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgaWYgKGFjdGl2ZVRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYWN0aXZlVGltZXIpOyAvLyBTdG9wIHRoZSB0aW1lclxuICAgICAgICAgICAgICBhY3RpdmVUaW1lciA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFjdGl2ZVRpbWVyID0gbnVsbDtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aW1lciBkaXNwbGF5XG4gICAgICAgICAgc3RlcERpdi5yZW1vdmVDaGlsZCh0aW1lckRpc3BsYXkpO1xuXG4gICAgICAgICAgLy8gRW5hYmxlIGJ1dHRvbnNcbiAgICAgICAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSk7XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gIH0sIDEwMDApO1xufVxuXG5leHBvcnQgeyBwYXJhbXNUb09iamVjdCwgc3RhcnRUaW1lciB9OyIsImltcG9ydCB7IERFVk1PREUgfSBmcm9tIFwiLi9nbG9iYWxzXCJcbmV4cG9ydCB2YXIgVUlEOiBzdHJpbmdcbmV4cG9ydCB2YXIgTU9DS01PREU6IGJvb2xlYW4gPSBmYWxzZVxuaW1wb3J0IHsgbG9hZF9kYXRhLCBsb2dfZGF0YSB9IGZyb20gJy4vY29ubmVjdG9yJ1xuaW1wb3J0IHsgcGFyYW1zVG9PYmplY3QsIHN0YXJ0VGltZXIgfSBmcm9tIFwiLi91dGlsc1wiXG4vL2ltcG9ydCB7IGdldF91c2VyX3RydXN0X2VmZmVjdCwgZ2V0X2FkanVzdGVkX2FpX2NvbmZpZGVuY2V9IGZyb20gXCIuL3J1bl91c2VyX21vZGVsc1wiXG5cbmxldCBVU0VSX01PREVMU19ST09UID0gXCJodHRwczovL3RlamFzc3Jpbml2YXNhbi5weXRob25hbnl3aGVyZS5jb20vXCJcbmxldCB1c2VyX2RlY2lzaW9uX21vZGVsID0gXCJ1c2VyX2FjY2VwdGFuY2VfbW9kZWwtbG9naXN0aWNyZWdyZXNzaW9uLTAuOTM0N3Rlc3RmMVwiXG5sZXQgdHJ1c3RfZWZmZWN0X21vZGVsID0gXCJ0cnVzdF9lZmZlY3RfbW9kZWwtc3ZtX2xpbmVhci0wLjQ2NDR0ZXN0bWFlLTAuOTA5NXRlc3R0ZWRhXCJcblxudmFyIGRhdGE6IGFueVtdID0gW11cbmxldCBxdWVzdGlvbl9pID0gLTFcbmxldCBxdWVzdGlvbjogYW55ID0gbnVsbFxubGV0IGluaXRpYWxfdXNlcl9kZWNpc2lvbjogbnVtYmVyID0gLTFcbmxldCBmaW5hbF91c2VyX2RlY2lzaW9uOiBudW1iZXIgPSAtMVxubGV0IGluaXRpYWxfdXNlcl9jb25maWRlbmNlOiBudW1iZXIgPSAtMVxubGV0IGZpbmFsX3VzZXJfY29uZmlkZW5jZTogbnVtYmVyID0gLTFcbmxldCBiYWxhbmNlID0gMFxubGV0IHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWw6IG51bWJlciA9IDVcbmxldCBiZXRfdmFsX3JhdGlvOiBudW1iZXIgPSAxXG5sZXQgdGltZV9xdWVzdGlvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV90cnVzdF9kZWNpc2lvbl9zdGFydDogbnVtYmVyXG5sZXQgdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQ6IG51bWJlclxubGV0IHRpbWVfZmluYWxfY29uZmlkZW5jZV9zdGFydDogbnVtYmVyXG5sZXQgaW5zdHJ1Y3Rpb25faTogbnVtYmVyID0gMFxubGV0IGNvdW50X2V4aXRlZF9wYWdlOiBudW1iZXIgPSAwXG5cbmxldCB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsOiBudW1iZXIgPSAwXG5cbnZhciBhbGxfdXNlcl9pbnRlcmFjdGlvbnMgPSBbXVxudmFyIGFpX2Fzc2lzdGFuY2VfaW50ZXJ2ZW50aW9uX2RhdGEgPSB7fVxudmFyIGludGVydmVudGlvbl9kZXRhaWxzID0ge31cbnZhciB0cnVzdF9lZmZlY3RfcHJlZGljdGlvbl9kYXRhID0ge31cbmxldCBmaW5kbmV3Y29uZl9yZXN1bHQ6IGFueVxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdGhyb3cgbWVzc2FnZSB8fCBcIkFzc2VydGlvbiBmYWlsZWRcIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5leHRfaW5zdHJ1Y3Rpb25zKGluY3JlbWVudDogbnVtYmVyKSB7XG4gICAgaW5zdHJ1Y3Rpb25faSArPSBpbmNyZW1lbnRcblxuICAgIGlmIChpbnN0cnVjdGlvbl9pID09IDApIHtcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX3ByZXZcIikuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgIH1cbiAgICBpZiAoaW5zdHJ1Y3Rpb25faSA+PSA2KSB7XG4gICAgICAgICQoXCIjaW5zdHJ1Y3Rpb25zX2FuZF9kZWNvcmF0aW9uc1wiKS5zaG93KClcbiAgICAgICAgJChcIiNidXR0b25faW5zdHJ1Y3Rpb25zX25leHRcIikudmFsKFwiU3RhcnQgc3R1ZHlcIilcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKFwiI2luc3RydWN0aW9uc19hbmRfZGVjb3JhdGlvbnNcIikuaGlkZSgpXG4gICAgICAgICQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19uZXh0XCIpLnZhbChcIk5leHRcIilcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9uX2kgPT0gNykge1xuICAgICAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5oaWRlKClcbiAgICAgICAgJChcIiNtYWluX2JveF9leHBlcmltZW50XCIpLnNob3coKVxuICAgICAgICBuZXh0X3F1ZXN0aW9uKClcbiAgICB9XG5cbiAgICAkKFwiI21haW5fYm94X2luc3RydWN0aW9uc1wiKS5jaGlsZHJlbihcIjpub3QoaW5wdXQpXCIpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgICAgICQoZWwpLmhpZGUoKVxuICAgIH0pXG4gICAgJChgI2luc3RydWN0aW9uc18ke2luc3RydWN0aW9uX2l9YCkuc2hvdygpXG59XG4kKFwiI2J1dHRvbl9pbnN0cnVjdGlvbnNfbmV4dFwiKS5vbihcImNsaWNrXCIsICgpID0+IG5leHRfaW5zdHJ1Y3Rpb25zKCsxKSlcbiQoXCIjYnV0dG9uX2luc3RydWN0aW9uc19wcmV2XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbmV4dF9pbnN0cnVjdGlvbnMoLTEpKVxuXG4kKFwiI2J1dHRvbl9uZXh0XCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGlmIChxdWVzdGlvbl9pICE9IC0xKSB7XG4gICAgICAgIGxldCBsb2dnZWRfZGF0YSA9IHtcbiAgICAgICAgICAgIFwicXVlc3Rpb25faVwiOiBxdWVzdGlvbl9pLFxuICAgICAgICAgICAgXCJ1c2VyX2JhbGFuY2VfcG9zdF9pbnRlcmFjdGlvblwiOiBiYWxhbmNlLFxuICAgICAgICAgICAgXCJ1c2VyX3RydXN0X3ZhbFwiOiB1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsLFxuICAgICAgICAgICAgXCJpbml0aWFsX3VzZXJfZGVjaXNpb25cIjogaW5pdGlhbF91c2VyX2RlY2lzaW9uLFxuICAgICAgICAgICAgXCJmaW5hbF91c2VyX2RlY2lzaW9uXCI6IGZpbmFsX3VzZXJfZGVjaXNpb24sXG4gICAgICAgICAgICBcImluaXRpYWxfdXNlcl9jb25maWRlbmNlXCI6IGluaXRpYWxfdXNlcl9jb25maWRlbmNlLFxuICAgICAgICAgICAgXCJmaW5hbF91c2VyX2NvbmZpZGVuY2VcIjogZmluYWxfdXNlcl9jb25maWRlbmNlLFxuICAgICAgICB9XG5cbiAgICAgICAgbG9nZ2VkX2RhdGFbJ3RpbWVzJ10gPSB7XG4gICAgICAgICAgICBcImluaXRpYWxfZGVjaXNpb25cIjogdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQgLSB0aW1lX3F1ZXN0aW9uX3N0YXJ0LFxuICAgICAgICAgICAgXCJpbml0aWFsX2NvbmZpZGVuY2VcIjogdGltZV9maW5hbF9kZWNpc2lvbl9zdGFydCAtIHRpbWVfaW5pdGlhbF9jb25maWRlbmNlX3N0YXJ0LFxuICAgICAgICAgICAgXCJmaW5hbF9kZWNpc2lvblwiOiB0aW1lX2ZpbmFsX2NvbmZpZGVuY2Vfc3RhcnQgLSB0aW1lX2ZpbmFsX2RlY2lzaW9uX3N0YXJ0LFxuICAgICAgICAgICAgXCJmaW5hbF9jb25maWRlbmNlXCI6IHRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQgLSB0aW1lX2ZpbmFsX2NvbmZpZGVuY2Vfc3RhcnQsXG4gICAgICAgICAgICBcInRydXN0X2RlY2lzaW9uXCI6IERhdGUubm93KCkgLSB0aW1lX3RydXN0X2RlY2lzaW9uX3N0YXJ0LFxuICAgICAgICB9XG4gICAgICAgIGxvZ2dlZF9kYXRhWydxdWVzdGlvbiddID0gcXVlc3Rpb25cbiAgICAgICAgbG9nZ2VkX2RhdGFbJ2NvdW50X2V4aXRlZF9wYWdlJ10gPSBjb3VudF9leGl0ZWRfcGFnZVxuICAgICAgICBsb2dnZWRfZGF0YVsnYWlfYXNzaXN0YW5jZV9pbnRlcnZlbnRpb25fZGF0YSddID0gYWlfYXNzaXN0YW5jZV9pbnRlcnZlbnRpb25fZGF0YVxuICAgICAgICBsb2dnZWRfZGF0YVsndHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSddID0gdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YVxuICAgICAgICBsb2dfZGF0YShsb2dnZWRfZGF0YSlcbiAgICAgICAgY291bnRfZXhpdGVkX3BhZ2UgPSAwXG5cbiAgICB9XG4gICAgbmV4dF9xdWVzdGlvbigpXG59KTtcblxuJCgnI3JhbmdlX3ZhbCcpLm9uKCdpbnB1dCBjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCA9ICgkKHRoaXMpLnZhbCgpISBhcyBudW1iZXIpXG4gICAgJChcIiNyYW5nZV90ZXh0XCIpLnRleHQoYEFmdGVyIHRoaXMgaW50ZXJhY3Rpb24sIHlvdXIgY3VycmVudCB0cnVzdCBpbiB0aGUgQUk6ICR7dXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAqIDEwfSAvIDEwMC5gKVxuICAgICQoXCIjYnV0dG9uX25leHRcIikuc2hvdygpXG59KTtcblxuZnVuY3Rpb24gbWFrZV9pbml0aWFsX3VzZXJfZGVjaXNpb24ob3B0aW9uKSB7XG4gICAgdGltZV9pbml0aWFsX2NvbmZpZGVuY2Vfc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgaW5pdGlhbF91c2VyX2RlY2lzaW9uID0gb3B0aW9uXG4gICAgYXNzZXJ0KG9wdGlvbiA9PSAxIHx8IG9wdGlvbiA9PSAyIHx8IG9wdGlvbiA9PSAzIHx8IG9wdGlvbiA9PSA0LCBcIkludmFsaWQgb3B0aW9uIVwiKVxuXG4gICAgLy8gUmVtb3ZlIGFjdGl2ZWRlY2lzaW9uIGZvciBhbGwgYnV0dG9ucyBleGNlcHQgdGhlIHNlbGVjdGVkIG9uZVxuICAgICQoYCNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24ke29wdGlvbn1gKS5hdHRyKFwiYWN0aXZlZGVjaXNpb25cIiwgXCJ0cnVlXCIpXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IG9wdGlvbikge1xuICAgICAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgfVxuICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uJHtpfWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJVc2VyJ3MgaW5pdGlhbCBkZWNpc2lvbjogT3B0aW9uIFwiLCBvcHRpb24pXG4gICAgXG4gICAgJChcIiNpbml0aWFsX3VzZXJfY29uZmlkZW5jZV9kaXZcIikuc2hvdygpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjJcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjNcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG59XG4kKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbigxKSlcbiQoXCIjYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5vbihcImNsaWNrXCIsICgpID0+IG1ha2VfaW5pdGlhbF91c2VyX2RlY2lzaW9uKDIpKVxuJChcIiNidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24zXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9pbml0aWFsX3VzZXJfZGVjaXNpb24oMykpXG4kKFwiI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjRcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2luaXRpYWxfdXNlcl9kZWNpc2lvbig0KSlcblxuZnVuY3Rpb24gZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlKGNvbmZfbGV2ZWwpIHtcbiAgICB0aW1lX2ZpbmFsX2RlY2lzaW9uX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGluaXRpYWxfdXNlcl9jb25maWRlbmNlID0gY29uZl9sZXZlbFxuICAgIGFzc2VydChjb25mX2xldmVsID09IDEgfHwgY29uZl9sZXZlbCA9PSAyIHx8IGNvbmZfbGV2ZWwgPT0gMywgXCJJbnZhbGlkIG9wdGlvbiFcIilcbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lLiBEaXNhYmxlIGFsbCBidXR0b25zLlxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgICAgICBpZiAoaSAhPSBjb25mX2xldmVsKSB7XG4gICAgICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uJHtpfWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbiAgICB9XG4gICAgJChgI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uJHtjb25mX2xldmVsfWApLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcblxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uMlwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG4gICAgJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uNFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIikgICAgXG5cbiAgICBnZXRfYWlfYXNzaXN0YW5jZSgpXG59XG4kKFwiI2J1dHRvbl9pbml0aWFsX2NvbmZpZGVuY2Vfb3B0aW9uMVwiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9pbml0aWFsX3VzZXJfY29uZmlkZW5jZSgxKSlcbiQoXCIjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlKDIpKVxuJChcIiNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbjNcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfaW5pdGlhbF91c2VyX2NvbmZpZGVuY2UoMykpXG5cblxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdXNlcl9kZWNpc2lvbl9wcm9iKCkge1xuICAgIC8vIFByZXBhcmUgaW5wdXRzIGZvciB0aGUgdXNlciBkZWNpc2lvbiBtb2RlbFxuICAgIGxldCB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50ID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgIGxldCB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSA9IGluaXRpYWxfdXNlcl9jb25maWRlbmNlXG4gICAgbGV0IGFpX2NvbmZpZGVuY2UgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXS5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDBcbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgfVxuICAgIGxldCB1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyA9IHtcbiAgICAgICAgXCJ1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50XCI6IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQsXG4gICAgICAgIFwidXNlcl9pbml0aWFsX2NvbmZpZGVuY2VcIjogdXNlcl9pbml0aWFsX2NvbmZpZGVuY2UsXG4gICAgICAgIFwiYWlfY29uZmlkZW5jZVwiOiBhaV9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgIFwidGltZXN0ZXBcIjogcXVlc3Rpb25faSxcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0OiBhbnlcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCAkLmFqYXgoXG4gICAgICAgICAgICBVU0VSX01PREVMU19ST09UICsgXCJnZXRfdXNlcl9kZWNpc2lvbl9wcm9iXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBcIm1lZGljYWwtZGlhZ25vc2lzLXN0dWR5XCIsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU6IHVzZXJfZGVjaXNpb25fbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzKSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFUlJPUiFcIilcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJ1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0c1wiOiB1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cywgXG4gICAgICAgIFwidXNlcl9hY2NlcHRhbmNlX2xpa2VsaWhvb2RcIjogcmVzdWx0W1wicHJlZF9wcm9ic1wiXVswXVsxXVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZXhhbWluZV9lZmZlY3Rfb2ZfdHJ1c3Rfb25fZGVjaXNpb25fbWFraW5nKCkge1xuICAgIC8vIFByZXBhcmUgaW5wdXQgdmFyaWFibGVzIGZvciB1c2VyIGRlY2lzaW9uIG1vZGVsXG4gICAgbGV0IHVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnQgPSBOdW1iZXIoaW5pdGlhbF91c2VyX2RlY2lzaW9uID09IHF1ZXN0aW9uIVtcImFpX3ByZWRpY3Rpb25cIl0pXG4gICAgbGV0IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlID0gaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VcbiAgICBsZXQgYWlfY29uZmlkZW5jZSA9IE51bWJlcihxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMFxuICAgIGxldCB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsXG4gICAgaWYgKHVzZVVzZXJSZXBvcnRlZFRydXN0VmFsKSB7XG4gICAgICAgIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA9ICh1c2VyX3JlcG9ydGVkX3RydXN0X2xldmVsIC0gNSkgLyAyLjVcbiAgICB9XG4gICAgbGV0IHVzZXJfZGVjaXNpb25fbW9kZWxfaW5wdXRzID0ge1xuICAgICAgICBcInVzZXJfYWlfaW5pdGlhbF9hZ3JlZW1lbnRcIjogdXNlcl9haV9pbml0aWFsX2FncmVlbWVudCxcbiAgICAgICAgXCJ1c2VyX2luaXRpYWxfY29uZmlkZW5jZVwiOiB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSxcbiAgICAgICAgXCJhaV9jb25maWRlbmNlXCI6IGFpX2NvbmZpZGVuY2UsXG4gICAgICAgIFwidXNlcl9jdXJyZW50X3RydXN0X2xldmVsXCI6IHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCxcbiAgICAgICAgXCJ0aW1lc3RlcFwiOiBxdWVzdGlvbl9pLFxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIlVzZXIgZGVjaXNpb24gbW9kZWwgaW5wdXRzOiBcIiwgdXNlcl9kZWNpc2lvbl9tb2RlbF9pbnB1dHMpXG5cbiAgICBsZXQgYWxkaWZmX3Jlc3VsdDogYW55XG4gICAgdHJ5IHtcbiAgICAgICAgYWxkaWZmX3Jlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImV4YW1pbmVfZWZmZWN0X29mX3RydXN0X29uX2RlY2lzaW9uX21ha2luZ1wiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB1c2VyX2RlY2lzaW9uX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeSh1c2VyX2RlY2lzaW9uX21vZGVsX2lucHV0cyksXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRVJST1IhXCIpXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGFsZGlmZl9yZXN1bHRcbn1cblxuYXN5bmMgZnVuY3Rpb24gZmluZF9iZXN0X2FpY29uZl90b19kaXNwbGF5KHVzZXJfYWNjZXB0YW5jZV9saWtlbGlob29kX25ldXRyYWxfdHJ1c3QpIHtcbiAgICAvLyBQcmVwYXJlIGlucHV0IHZhcmlhYmxlcyBmb3IgdXNlciBkZWNpc2lvbiBtb2RlbFxuICAgIGxldCB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50ID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgIGxldCB1c2VyX2luaXRpYWxfY29uZmlkZW5jZSA9IGluaXRpYWxfdXNlcl9jb25maWRlbmNlXG4gICAgbGV0IGFpX2NvbmZpZGVuY2UgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfY29uZmlkZW5jZVwiXS5yZXBsYWNlKFwiJVwiLCBcIlwiKSkgLyAxMDBcbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgfVxuICAgIGxldCBmaW5kbmV3Y29uZl9pbnB1dF92YXJpYWJsZXMgPSB7XG4gICAgICAgIFwidXNlcl9haV9pbml0aWFsX2FncmVlbWVudFwiOiB1c2VyX2FpX2luaXRpYWxfYWdyZWVtZW50LFxuICAgICAgICBcInVzZXJfaW5pdGlhbF9jb25maWRlbmNlXCI6IHVzZXJfaW5pdGlhbF9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwsXG4gICAgICAgIFwidGltZXN0ZXBcIjogcXVlc3Rpb25faSxcbiAgICAgICAgXCJ1c2VyX2FjY2VwdGFuY2VfbGlrZWxpaG9vZF9uZXV0cmFsX3RydXN0XCI6IHVzZXJfYWNjZXB0YW5jZV9saWtlbGlob29kX25ldXRyYWxfdHJ1c3QsXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGZpbmRuZXdjb25mX3Jlc3VsdCA9IGF3YWl0ICQuYWpheChcbiAgICAgICAgICAgIFVTRVJfTU9ERUxTX1JPT1QgKyBcImZpbmRfYmVzdF9haWNvbmZfdG9fZGlzcGxheVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB1c2VyX2RlY2lzaW9uX21vZGVsLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShmaW5kbmV3Y29uZl9pbnB1dF92YXJpYWJsZXMpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIVwiKVxuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cblxuICAgIHJldHVybiBmaW5kbmV3Y29uZl9yZXN1bHRcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X2FpX2Fzc2lzdGFuY2UoKSB7XG4gICAgY29uc29sZS5sb2coXCJHZXR0aW5nIEFJIGFzc2lzdGFuY2UuLi5cIilcblxuICAgIGxldCBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSA9IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl1cbiAgICBsZXQgdXNlcl9jdXJyZW50X3RydXN0X2xldmVsID0gdXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbFxuICAgIGlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCkge1xuICAgICAgICB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPSAodXNlcl9yZXBvcnRlZF90cnVzdF9sZXZlbCAtIDUpIC8gMi41XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXNpbmcgdXNlciByZXBvcnRlZCB0cnVzdCB2YWx1ZTogXCIsIHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWwpXG4gICAgfVxuICAgIGludGVydmVudGlvbl9kZXRhaWxzID0ge1xuICAgICAgICBcImludGVydmVudGlvbl9hcHBsaWVkXCI6IGZhbHNlLCBcbiAgICAgICAgXCJ0cnVzdF9sZXZlbF9hdF9zdGFydF9vZl9pbnRlcmFjdGlvblwiOiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWxcbiAgICBcbiAgICB9XG5cbiAgICBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwibm9uZVwiIHx8IChpbml0aWFsX3VzZXJfZGVjaXNpb24gPT0gcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSkpIHtcbiAgICAgICAgLy8gTm8gaW50ZXJ2ZW50aW9uLCBqdXN0IHNob3cgdGhlIEFJIGFzc2lzdGFuY2UgdGhhdCBpcyBhbHJlYWR5IHBvcHVsYXRlZCBpbiB0aGUgc3BhblxuICAgICAgICBjb25zb2xlLmxvZyhcIk5vdCBhcHBseWluZyBhbnkgaW50ZXJ2ZW50aW9uLlwiKVxuICAgICAgICBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSA9IHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl1cbiAgICB9XG4gICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiY29uZmlkZW5jZV9tYW5pcFwiKSB7XG4gICAgICAgIC8vIE1vZGlmeSBBSSBjb25maWRlbmNlXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm5vbmVcIikgfHwgXG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibWl0aWdhdGVfdW5kZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA8IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX292ZXJ0cnVzdFwiICYmIHVzZXJfY3VycmVudF90cnVzdF9sZXZlbCA+IEludGVydmVudGlvblRydXN0VGhyZXNob2xkKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXBwbHlpbmcgQUkgY29uZmlkZW5jZSBtYW5pcHVsYXRpb24gaW50ZXJ2ZW50aW9uLlwiKVxuICAgICAgICAgICAgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJmaXhlZFwiKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSB0byBBSSdzIGNvbmZpZGVuY2VcbiAgICAgICAgICAgICAgICAvLyAoSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlIGNhbiBiZSBuZWdhdGl2ZSlcbiAgICAgICAgICAgICAgICBsZXQgYWlfY29uZmlkZW5jZSA9IE51bWJlcihxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMFxuICAgICAgICAgICAgICAgIGxldCBuZXdfY29uZmlkZW5jZSA9IE1hdGgubWluKDEsIGFpX2NvbmZpZGVuY2UgKyBJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UpXG4gICAgICAgICAgICAgICAgbmV3X2NvbmZpZGVuY2UgPSBNYXRoLm1heCgwLjUsIG5ld19jb25maWRlbmNlKVxuICAgICAgICAgICAgICAgIGRpc3BsYXllZF9haV9jb25maWRlbmNlID0gU3RyaW5nKCggbmV3X2NvbmZpZGVuY2UgKiAxMDApLnRvRml4ZWQoMCkpICsgXCIlXCJcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlkZW5jZV9jaGFuZ2UgPSAobmV3X2NvbmZpZGVuY2UgLSBhaV9jb25maWRlbmNlKS50b0ZpeGVkKDIpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBY3R1YWwgQUkgY29uZmlkZW5jZTogXCIsIHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0sIFwiLCBDb25maWRlbmNlIHNob3duIHRvIHVzZXI6IFwiLCBkaXNwbGF5ZWRfYWlfY29uZmlkZW5jZSlcblxuICAgICAgICAgICAgICAgIGludGVydmVudGlvbl9kZXRhaWxzW1wiY29uZl9hY3R1YWxcIl0gPSBxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJjb25mX2Rpc3BsYXllZFwiXSA9IGRpc3BsYXllZF9haV9jb25maWRlbmNlXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJjb25mX2NoYW5nZVwiXSA9IGNvbmZpZGVuY2VfY2hhbmdlXG4gICAgICAgICAgICAgICAgaW50ZXJ2ZW50aW9uX2RldGFpbHNbXCJpbnRlcnZlbnRpb25fYXBwbGllZFwiXSA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gXCJhZGFwdGl2ZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGFkYXB0aXZlIHN0cmF0ZWd5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbmRpdGlvbnMgZm9yIGFwcGx5aW5nICdjb25maWRlbmNlIG1hbmlwdWxhdGlvbicgaW50ZXJ2ZW50aW9uIG5vdCBzYXRpc2ZpZWQuXCIpXG4gICAgICAgIH1cblxuICAgIH0gXG4gICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiYWlfZXhwbGFuYXRpb25cIikge1xuICAgICAgICAvLyBBZGQgQUkgZXhwbGFuYXRpb25cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibm9uZVwiKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX3VuZGVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPCBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCkgfHxcbiAgICAgICAgICAgIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJtaXRpZ2F0ZV9vdmVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPiBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFwcGx5aW5nIEFJIGV4cGxhbmF0aW9uIGludGVydmVudGlvbi5cIilcbiAgICAgICAgICAgIGlmIChBSUludGVydmVudGlvblN0cmF0ZWd5ID09IFwiZml4ZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2hvd2luZyBleHBsYW5hdGlvblwiKVxuICAgICAgICAgICAgICAgIGxldCBleHBsYW5hdGlvbl9zaG93bjogc3RyaW5nID0gIXF1ZXN0aW9uIVtcImFpX2V4cGxhbmF0aW9uXCJdID8gXCJObyBleHBsYW5hdGlvbiBwcm92aWRlZFwiIDogcXVlc3Rpb24hW1wiYWlfZXhwbGFuYXRpb25cIl1cbiAgICAgICAgICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX3NwYW5cIikuaHRtbChleHBsYW5hdGlvbl9zaG93bilcbiAgICAgICAgICAgICAgICAkKFwiI2FpX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImV4cGxhbmF0aW9uX3Nob3duXCJdID0gZXhwbGFuYXRpb25fc2hvd25cbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImludGVydmVudGlvbl9hcHBsaWVkXCJdID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWlfZXhwbGFuYXRpb25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaV9leHBsYW5hdGlvbl9kaXZcIilcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25zID0gW1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24xXCIpLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBzdGFydFRpbWVyKDE1LCBhaV9leHBsYW5hdGlvbl9kaXYsIGJ1dHRvbnMsIG51bGwsIFwiUGxlYXNlIHJlYWQgdGhlIGV4cGxhbmF0aW9uLlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25TdHJhdGVneSA9PSBcImFkYXB0aXZlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgYWRhcHRpdmUgc3RyYXRlZ3lcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25kaXRpb25zIGZvciBhcHBseWluZyAnQUkgZXhwbGFuYXRpb24nIGludGVydmVudGlvbiBub3Qgc2F0aXNmaWVkLlwiKVxuICAgICAgICB9XG5cbiAgICB9XG4gICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25UeXBlID09IFwiYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25cIikge1xuICAgICAgICAvLyBBZGQgQUkgZXhwbGFuYXRpb25cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoQUlJbnRlcnZlbnRpb25Hb2FsID09IFwibm9uZVwiKSB8fFxuICAgICAgICAgICAgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX3VuZGVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPCBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCkgfHxcbiAgICAgICAgICAgIChBSUludGVydmVudGlvbkdvYWwgPT0gXCJtaXRpZ2F0ZV9vdmVydHJ1c3RcIiAmJiB1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwgPiBJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFwcGx5aW5nIEFJIGV4cGxhbmF0aW9uIGludGVydmVudGlvbi5cIilcbiAgICAgICAgICAgIGlmIChBSUludGVydmVudGlvblN0cmF0ZWd5ID09IFwiZml4ZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2hvd2luZyBleHBsYW5hdGlvblwiKVxuICAgICAgICAgICAgICAgIGxldCBleHBsYW5hdGlvbl9zaG93bjogc3RyaW5nID0gIXF1ZXN0aW9uIVtcImFpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uXCJdID8gXCJObyBleHBsYW5hdGlvbiBwcm92aWRlZFwiIDogcXVlc3Rpb24hW1wiYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25cIl1cbiAgICAgICAgICAgICAgICAkKFwiI2FpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX3NwYW5cIikuaHRtbChleHBsYW5hdGlvbl9zaG93bilcbiAgICAgICAgICAgICAgICAkKFwiI2FpX2NvbnRyYXN0aXZlX2V4cGxhbmF0aW9uX2RpdlwiKS5zaG93KClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImV4cGxhbmF0aW9uX3Nob3duXCJdID0gZXhwbGFuYXRpb25fc2hvd25cbiAgICAgICAgICAgICAgICBpbnRlcnZlbnRpb25fZGV0YWlsc1tcImludGVydmVudGlvbl9hcHBsaWVkXCJdID0gdHJ1ZVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9kaXZcIilcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25zID0gW1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24xXCIpLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBzdGFydFRpbWVyKDEwLCBhaV9jb250cmFzdGl2ZV9leHBsYW5hdGlvbl9kaXYsIGJ1dHRvbnMsIG51bGwsIFwiUGxlYXNlIHJlYWQgdGhlIGV4cGxhbmF0aW9uLlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQUlJbnRlcnZlbnRpb25TdHJhdGVneSA9PSBcImFkYXB0aXZlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbXBsZW1lbnQgYWRhcHRpdmUgc3RyYXRlZ3lcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25kaXRpb25zIGZvciBhcHBseWluZyAnQUkgZXhwbGFuYXRpb24nIGludGVydmVudGlvbiBub3Qgc2F0aXNmaWVkLlwiKVxuICAgICAgICB9XG5cbiAgICB9XG5cblxuICAgIC8vaW50ZXJ2ZW50aW9uX2RldGFpbHNbJ2FjdHVhbF9haV9jb25maWRlbmNlJ10gPSBxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdXG4gICAgLy9pbnRlcnZlbnRpb25fZGV0YWlsc1snZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UnXSA9IGRpc3BsYXllZF9haV9jb25maWRlbmNlXG4gICAgY29uc29sZS5sb2coXCJBSSBBc3Npc3RhbmNlIEludGVydmVudGlvbiBEZXRhaWxzOiBcIiwgaW50ZXJ2ZW50aW9uX2RldGFpbHMpXG5cbiAgICAkKFwiI2FpX3ByZWRpY3Rpb25fc3BhblwiKS5odG1sKFwiT3B0aW9uIFwiICsgcXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSlcbiAgICAkKFwiI2FpX2NvbmZpZGVuY2Vfc3BhblwiKS5odG1sKGRpc3BsYXllZF9haV9jb25maWRlbmNlKVxuXG4gICAgJChcIiNhaV9hc3Npc3RhbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2ZpbmFsX3VzZXJfZGVjaXNpb25fZGl2XCIpLnNob3coKVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfdHJ1c3RfZWZmZWN0KCkge1xuICAgIC8vIEdldCB0cnVzdCBlZmZlY3QgZm9yIHRoaXMgaW50ZXJhY3Rpb25cbiAgICBsZXQgaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzID0gTnVtYmVyKGluaXRpYWxfdXNlcl9kZWNpc2lvbiA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgYWlfY29ycmVjdG5lc3MgPSBOdW1iZXIocXVlc3Rpb24hW1wiYWlfcHJlZGljdGlvblwiXSA9PSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXSlcbiAgICBsZXQgZmluYWxfdXNlcl9jb3JyZWN0bmVzcyA9IE51bWJlcihmaW5hbF91c2VyX2RlY2lzaW9uID09IHF1ZXN0aW9uIVtcImNvcnJlY3Rfb3B0aW9uXCJdKVxuICAgIGxldCBhaV9jb25maWRlbmNlID0gTnVtYmVyKHF1ZXN0aW9uIVtcImFpX2NvbmZpZGVuY2VcIl0ucmVwbGFjZShcIiVcIiwgXCJcIikpIC8gMTAwXG4gICAgbGV0IHRydXN0X2VmZmVjdF9pbnB1dHMgPSB7XG4gICAgICAgIFwiaW5pdGlhbF91c2VyX2NvcnJlY3RuZXNzXCI6IGluaXRpYWxfdXNlcl9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJhaV9jb3JyZWN0bmVzc1wiOiBhaV9jb3JyZWN0bmVzcyxcbiAgICAgICAgXCJmaW5hbF91c2VyX2NvcnJlY3RuZXNzXCI6IGZpbmFsX3VzZXJfY29ycmVjdG5lc3MsXG4gICAgICAgIFwiYWlfY29uZmlkZW5jZVwiOiBhaV9jb25maWRlbmNlLFxuICAgICAgICBcInVzZXJfY3VycmVudF90cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsLFxuICAgICAgICBcInRpbWVzdGVwXCI6IHF1ZXN0aW9uX2ksXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiVHJ1c3QgZWZmZWN0IGlucHV0czogXCIsIHRydXN0X2VmZmVjdF9pbnB1dHMpXG4gICAgLy9sZXQgdHJ1c3RfZWZmZWN0ID0gZ2V0X3VzZXJfdHJ1c3RfZWZmZWN0KHRydXN0X2VmZmVjdF9pbnB1dHMpXG4gICAgbGV0IHJlc3VsdDogYW55XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgJC5hamF4KFxuICAgICAgICAgICAgVVNFUl9NT0RFTFNfUk9PVCArIFwiZ2V0X3RydXN0X2VmZmVjdFwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogXCJtZWRpY2FsLWRpYWdub3Npcy1zdHVkeVwiLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lOiB0cnVzdF9lZmZlY3RfbW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHRydXN0X2VmZmVjdF9pbnB1dHMpLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVSUk9SIVwiKVxuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKFwiVHJ1c3QgZWZmZWN0IHByZWRpY3Rpb24gcmVzdWx0OiBcIiwgcmVzdWx0KVxuICAgIGxldCB0cnVzdF9lZmZlY3QgPSBhd2FpdCByZXN1bHRbXCJ0cnVzdF9lZmZlY3RcIl1cblxuICAgIHVzZXJfY3VycmVudF9lc3RpbWF0ZWRfdHJ1c3RfbGV2ZWwgPSB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsICsgdHJ1c3RfZWZmZWN0XG4gICAgdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YSA9IHtcbiAgICAgICAgXCJtb2RlbF9pbnB1dHNcIjogdHJ1c3RfZWZmZWN0X2lucHV0cyxcbiAgICAgICAgXCJwcmVkaWN0ZWRfdHJ1c3RfZWZmZWN0XCI6IHRydXN0X2VmZmVjdCxcbiAgICAgICAgXCJ1c2VyX25ld190cnVzdF9sZXZlbFwiOiB1c2VyX2N1cnJlbnRfZXN0aW1hdGVkX3RydXN0X2xldmVsLFxuICAgIH1cbiAgICByZXR1cm4gdHJ1c3RfZWZmZWN0X3ByZWRpY3Rpb25fZGF0YVxufVxuXG5mdW5jdGlvbiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24ob3B0aW9uKSB7XG4gICAgdGltZV9maW5hbF9jb25maWRlbmNlX3N0YXJ0ID0gRGF0ZS5ub3coKVxuICAgIGZpbmFsX3VzZXJfZGVjaXNpb24gPSBvcHRpb25cbiAgICBhc3NlcnQob3B0aW9uID09IDEgfHwgb3B0aW9uID09IDIgfHwgb3B0aW9uID09IDMgfHwgb3B0aW9uID09IDQsIFwiSW52YWxpZCBvcHRpb24hXCIpXG5cbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IG9wdGlvbikge1xuICAgICAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkuYXR0cihcImRpc2FibGVkXCIsIFwidHJ1ZVwiKVxuICAgIH1cbiAgICAkKGAjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbiR7b3B0aW9ufWApLmF0dHIoXCJhY3RpdmVkZWNpc2lvblwiLCBcInRydWVcIilcblxuICAgICQoXCIjZmluYWxfdXNlcl9jb25maWRlbmNlX2RpdlwiKS5zaG93KClcbiAgICAkKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjFcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24yXCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgICQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uM1wiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbn1cbiQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjFcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24oMSkpXG4kKFwiI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24yXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gbWFrZV9maW5hbF91c2VyX2RlY2lzaW9uKDIpKVxuJChcIiNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uM1wiKS5vbihcImNsaWNrXCIsICgpID0+IG1ha2VfZmluYWxfdXNlcl9kZWNpc2lvbigzKSlcbiQoXCIjYnV0dG9uX2ZpbmFsX2RlY2lzaW9uX29wdGlvbjRcIikub24oXCJjbGlja1wiLCAoKSA9PiBtYWtlX2ZpbmFsX3VzZXJfZGVjaXNpb24oNCkpXG5cbmZ1bmN0aW9uIGdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UoY29uZl9sZXZlbCkge1xuICAgIHRpbWVfdHJ1c3RfZGVjaXNpb25fc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgZmluYWxfdXNlcl9jb25maWRlbmNlID0gY29uZl9sZXZlbFxuICAgIGFzc2VydChjb25mX2xldmVsID09IDEgfHwgY29uZl9sZXZlbCA9PSAyIHx8IGNvbmZfbGV2ZWwgPT0gMywgXCJJbnZhbGlkIG9wdGlvbiFcIilcbiAgICAvLyBSZW1vdmUgYWN0aXZlZGVjaXNpb24gZm9yIGFsbCBidXR0b25zIGV4Y2VwdCB0aGUgc2VsZWN0ZWQgb25lXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgICAgIGlmIChpICE9IGNvbmZfbGV2ZWwpIHtcbiAgICAgICAgICAgICQoYCNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgIH1cbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJ0cnVlXCIpXG4gICAgfVxuICAgICQoYCNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24ke2NvbmZfbGV2ZWx9YCkuYXR0cihcImFjdGl2ZWRlY2lzaW9uXCIsIFwidHJ1ZVwiKVxuXG4gICAgc2hvd19yZXN1bHQoKVxufVxuJChcIiNidXR0b25fZmluYWxfY29uZmlkZW5jZV9vcHRpb24xXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4gZ2V0X2ZpbmFsX3VzZXJfY29uZmlkZW5jZSgxKSlcbiQoXCIjYnV0dG9uX2ZpbmFsX2NvbmZpZGVuY2Vfb3B0aW9uMlwiKS5vbihcImNsaWNrXCIsICgpID0+IGdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UoMikpXG4kKFwiI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbjNcIikub24oXCJjbGlja1wiLCAoKSA9PiBnZXRfZmluYWxfdXNlcl9jb25maWRlbmNlKDMpKVxuXG5cbmFzeW5jIGZ1bmN0aW9uIHNob3dfcmVzdWx0KCkge1xuXG4gICAgbGV0IGNvcnJlY3Rfb3B0aW9uOiBudW1iZXIgPSBxdWVzdGlvbiFbXCJjb3JyZWN0X29wdGlvblwiXVxuICAgIGxldCBjb3JyZWN0X29wdGlvbl9zdHI6IHN0cmluZyA9IHF1ZXN0aW9uIVtgb3B0aW9uJHtjb3JyZWN0X29wdGlvbn1gXVxuICAgIGxldCB1c2VyX2lzX2NvcnJlY3Q6IGJvb2xlYW4gPSBjb3JyZWN0X29wdGlvbiA9PSBmaW5hbF91c2VyX2RlY2lzaW9uXG5cbiAgICBsZXQgYWlfaXNfY29ycmVjdDogYm9vbGVhbiA9IHF1ZXN0aW9uIVtcImFpX2lzX2NvcnJlY3RcIl1cbiAgICBsZXQgbWVzc2FnZSA9IFwiQ29ycmVjdCBhbnN3ZXI6IDxiPk9wdGlvbiBcIiArIGNvcnJlY3Rfb3B0aW9uICsgXCI6IFwiICsgY29ycmVjdF9vcHRpb25fc3RyICsgXCI8L2I+Ljxicj5cIlxuICAgIGlmICh1c2VyX2lzX2NvcnJlY3QpIHtcbiAgICAgICAgbWVzc2FnZSArPSBcIllvdSBwaWNrZWQgT3B0aW9uIFwiICsgZmluYWxfdXNlcl9kZWNpc2lvbiArIFwiLCB3aGljaCB3YXMgPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCJZb3UgcGlja2VkIE9wdGlvbiBcIiArIGZpbmFsX3VzZXJfZGVjaXNpb24gKyBcIiwgd2hpY2ggd2FzIDxzcGFuIGNsYXNzPSdjb2xvcl9pbmNvcnJlY3QnPjxiPmluY29ycmVjdDwvYj48L3NwYW4+Ljxicj5cIlxuICAgIH1cbiAgICBpZiAoYWlfaXNfY29ycmVjdCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiVGhlIEFJIHBpY2tlZCBPcHRpb24gXCIgKyBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfY29ycmVjdCc+PGI+Y29ycmVjdDxiPjwvc3Bhbj4uPGJyPlwiXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IFwiVGhlIEFJIHBpY2tlZCBPcHRpb24gXCIgKyBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdICsgXCIsIHdoaWNoIHdhcyA8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5pbmNvcnJlY3Q8L2I+PC9zcGFuPi48YnI+XCJcbiAgICB9XG4gICAgaWYgKHVzZXJfaXNfY29ycmVjdCkge1xuICAgICAgICBtZXNzYWdlICs9IFwiPHNwYW4gY2xhc3M9J2NvbG9yX2NvcnJlY3QnPjxiPllvdSByZWNlaXZlIGEgcmV3YXJkIG9mICQwLjEwLjwvYj48L3NwYW4+XCJcbiAgICAgICAgYmFsYW5jZSArPSAwLjFcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gXCI8c3BhbiBjbGFzcz0nY29sb3JfaW5jb3JyZWN0Jz48Yj5Zb3UgZG8gbm90IHJlY2VpdmUgYW55IHJld2FyZC48L2I+PC9zcGFuPlwiXG4gICAgfVxuXG4gICAgbWVzc2FnZSArPSBcIjxicj5cIlxuICAgIC8vaWYgKHN1Y2Nlc3MpIHtcbiAgICAvLyAgICBtZXNzYWdlICs9IGBZb3UgZ2FpbiAkJHsoYmV0X3ZhbCpiZXRfdmFsX3JhdGlvKS50b0ZpeGVkKDIpfS5gXG4gICAgLy8gICAgYmFsYW5jZSArPSBiZXRfdmFsKmJldF92YWxfcmF0aW9cbiAgICAvL30gZWxzZSB7XG4gICAgLy8gICAgbWVzc2FnZSArPSBgWW91IGxvc2UgJCR7KGJldF92YWwvMS4wKS50b0ZpeGVkKDIpfS5gXG4gICAgLy8gICAgYmFsYW5jZSAtPSBiZXRfdmFsLzEuMFxuICAgIC8vICAgIGJhbGFuY2UgPSBNYXRoLm1heCgwLCBiYWxhbmNlKVxuICAgIC8vfVxuICAgICQoXCIjYmFsYW5jZVwiKS50ZXh0KGBCYWxhbmNlOiAkJHtiYWxhbmNlLnRvRml4ZWQoMil9ICsgJDIuMGApXG4gICAgJChcIiNyZXN1bHRfc3BhblwiKS5odG1sKG1lc3NhZ2UpXG4gICAgLy8kKFwiI2J1dHRvbl9uZXh0XCIpLnNob3coKVxuICAgICQoXCIjcmVzdWx0X3NwYW5cIikuc2hvdygpXG4gICAgLy8kKFwiI2J1dHRvbl9wbGFjZV9iZXRcIikuaGlkZSgpXG4gICAgJChcIiNob3dfY29uZmlkZW50X2RpdlwiKS5zaG93KClcblxuICAgIHRydXN0X2VmZmVjdF9wcmVkaWN0aW9uX2RhdGEgPSBhd2FpdCBnZXRfdHJ1c3RfZWZmZWN0KClcblxuICAgIC8vJCgnI3JhbmdlX3ZhbCcpLmF0dHIoXCJkaXNhYmxlZFwiLCBcInRydWVcIilcbn1cblxuLy8kKFwiI2J1dHRvbl9wbGFjZV9iZXRcIikub24oXCJjbGlja1wiLCBzaG93X3Jlc3VsdClcblxuZnVuY3Rpb24gc3RhcnRfdGltZXJfZm9yX2luaXRpYWxfZGVjaXNpb24oKSB7XG4gICAgY29uc3QgaW5pdGlhbF91c2VyX2RlY2lzaW9uX2RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5pdGlhbF91c2VyX2RlY2lzaW9uX2RpdlwiKVxuICAgIGNvbnN0IGJ1dHRvbnMgPSBbXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uMVwiKSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25faW5pdGlhbF9kZWNpc2lvbl9vcHRpb24yXCIpLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbjNcIiksXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnV0dG9uX2luaXRpYWxfZGVjaXNpb25fb3B0aW9uNFwiKSxcbiAgICBdXG4gICAgc3RhcnRUaW1lcigxMCwgaW5pdGlhbF91c2VyX2RlY2lzaW9uX2RpdiwgYnV0dG9ucywgbnVsbCwgXCJQbGVhc2UgcmVhZCB0aGUgc3ltcHRvbXMgYW5kIG9wdGlvbnMgY2xvc2VseS5cIilcbn1cblxuXG5mdW5jdGlvbiBuZXh0X3F1ZXN0aW9uKCkge1xuICAgIC8vIHJlc3RvcmUgcHJldmlvdXMgc3RhdGUgb2YgVUlcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSA0OyBpKyspIHtcbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChgI2J1dHRvbl9pbml0aWFsX2RlY2lzaW9uX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9kZWNpc2lvbl9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoYCNidXR0b25fZmluYWxfZGVjaXNpb25fb3B0aW9uJHtpfWApLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDM7IGkrKykge1xuICAgICAgICAkKGAjYnV0dG9uX2luaXRpYWxfY29uZmlkZW5jZV9vcHRpb24ke2l9YCkucmVtb3ZlQXR0cihcImFjdGl2ZWRlY2lzaW9uXCIpXG4gICAgICAgICQoYCNidXR0b25faW5pdGlhbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiYWN0aXZlZGVjaXNpb25cIilcbiAgICAgICAgJChgI2J1dHRvbl9maW5hbF9jb25maWRlbmNlX29wdGlvbiR7aX1gKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICB9XG5cbiAgICAkKFwiI2FpX2Fzc2lzdGFuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjYWlfZXhwbGFuYXRpb25fZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25fZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjaW5pdGlhbF91c2VyX2NvbmZpZGVuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjZmluYWxfdXNlcl9kZWNpc2lvbl9kaXZcIikuaGlkZSgpXG4gICAgJChcIiNmaW5hbF91c2VyX2NvbmZpZGVuY2VfZGl2XCIpLmhpZGUoKVxuICAgICQoJyNyYW5nZV92YWwnKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAkKFwiI2hvd19jb25maWRlbnRfZGl2XCIpLmhpZGUoKVxuICAgICQoXCIjYnV0dG9uX3BsYWNlX2JldFwiKS5oaWRlKClcbiAgICAkKFwiI2J1dHRvbl9uZXh0XCIpLmhpZGUoKVxuICAgICQoXCIjcmVzdWx0X3NwYW5cIikuaGlkZSgpXG4gICAgaWYgKHF1ZXN0aW9uX2kgPT0gLTEpIHtcbiAgICAgICAgJChcIiNyYW5nZV90ZXh0XCIpLnRleHQoXCItXCIpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAkKFwiI3JhbmdlX3RleHRcIikudGV4dChgQmVmb3JlIHRoaXMgaW50ZXJhY3Rpb24sIHlvdXIgdHJ1c3QgaW4gdGhlIEFJOiAke3VzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWwgKiAxMH0gLyAxMDAuYClcbiAgICB9XG4gICAgJChcIiNyYW5nZV92YWxcIikudmFsKHVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWwpXG5cbiAgICBxdWVzdGlvbl9pICs9IDFcbiAgICBpZiAocXVlc3Rpb25faSA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAkKFwiI21haW5fYm94X2V4cGVyaW1lbnRcIikuaGlkZSgpXG4gICAgICAgIGlmIChNT0NLTU9ERSkge1xuICAgICAgICAgICAgJChcIiNtYWluX2JveF9lbmRfbW9ja1wiKS5zaG93KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoXCIjbWFpbl9ib3hfZW5kXCIpLnNob3coKVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBxdWVzdGlvbiA9IGRhdGFbcXVlc3Rpb25faV1cblxuICAgICQoXCIjcXVlc3Rpb25fc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcInF1ZXN0aW9uXCJdKVxuICAgICQoXCIjb3B0aW9uMV9zcGFuXCIpLmh0bWwocXVlc3Rpb24hW1wib3B0aW9uMVwiXSlcbiAgICAkKFwiI29wdGlvbjJfc3BhblwiKS5odG1sKHF1ZXN0aW9uIVtcIm9wdGlvbjJcIl0pXG4gICAgJChcIiNvcHRpb24zX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJvcHRpb24zXCJdKVxuICAgICQoXCIjb3B0aW9uNF9zcGFuXCIpLmh0bWwocXVlc3Rpb24hW1wib3B0aW9uNFwiXSlcbiAgICAvLyQoXCIjYWlfcHJlZGljdGlvbl9zcGFuXCIpLmh0bWwoXCJPcHRpb24gXCIgKyBxdWVzdGlvbiFbXCJhaV9wcmVkaWN0aW9uXCJdKVxuICAgIC8vJChcIiNhaV9jb25maWRlbmNlX3NwYW5cIikuaHRtbChxdWVzdGlvbiFbXCJhaV9jb25maWRlbmNlXCJdKVxuXG4gICAgLy8gc2V0IGJldCB2YWx1ZSByYXRpb1xuICAgIGlmKHF1ZXN0aW9uLmhhc093blByb3BlcnR5KFwicmV3YXJkX3JhdGlvXCIpKSB7XG4gICAgICAgIGxldCBbcmF0aW8xLCByYXRpbzJdID0gcXVlc3Rpb25bXCJyZXdhcmRfcmF0aW9cIl1cbiAgICAgICAgcmF0aW8xID0gTnVtYmVyKHJhdGlvMSlcbiAgICAgICAgcmF0aW8yID0gTnVtYmVyKHJhdGlvMilcbiAgICAgICAgYmV0X3ZhbF9yYXRpbyA9IHJhdGlvMS9yYXRpbzJcbiAgICB9IGVsc2Uge1xuICAgICAgICBiZXRfdmFsX3JhdGlvID0gMVxuICAgIH1cblxuICAgIHRpbWVfcXVlc3Rpb25fc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgJChcIiNwcm9ncmVzc1wiKS50ZXh0KGBQcm9ncmVzczogJHtxdWVzdGlvbl9pICsgMX0gLyAke2RhdGEubGVuZ3RofWApXG5cbiAgICBzdGFydF90aW1lcl9mb3JfaW5pdGlhbF9kZWNpc2lvbigpXG59XG5cbi8vIGdldCB1c2VyIGlkIGFuZCBsb2FkIHF1ZXVlXG4vLyB0cnkgdG8gc2VlIGlmIHN0YXJ0IG92ZXJyaWRlIHdhcyBwYXNzZWRcbmNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG5jb25zdCBzdGFydE92ZXJyaWRlID0gdXJsUGFyYW1zLmdldCgnc3RhcnQnKTtcbmNvbnN0IFVJREZyb21VUkwgPSB1cmxQYXJhbXMuZ2V0KFwidWlkXCIpXG5nbG9iYWxUaGlzLnVybF9kYXRhID0gcGFyYW1zVG9PYmplY3QodXJsUGFyYW1zLmVudHJpZXMoKSlcblxuaWYgKFVJREZyb21VUkwgIT0gbnVsbCkge1xuICAgIGdsb2JhbFRoaXMudWlkID0gVUlERnJvbVVSTCBhcyBzdHJpbmdcbiAgICBpZiAoZ2xvYmFsVGhpcy51aWQgPT0gXCJwcm9saWZpY19yYW5kb21cIikge1xuICAgICAgICBsZXQgcXVldWVfaWQgPSBgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCl9YC5wYWRTdGFydCgzLCBcIjBcIilcbiAgICAgICAgZ2xvYmFsVGhpcy51aWQgPSBgJHt1cmxQYXJhbXMuZ2V0KFwicHJvbGlmaWNfcXVldWVfbmFtZVwiKX0vJHtxdWV1ZV9pZH1gXG4gICAgfVxufSBlbHNlIGlmIChERVZNT0RFKSB7XG4gICAgZ2xvYmFsVGhpcy51aWQgPSBcImRlbW9cIlxufSBlbHNlIHtcbiAgICBsZXQgVUlEX21heWJlOiBhbnkgPSBudWxsXG4gICAgd2hpbGUgKFVJRF9tYXliZSA9PSBudWxsKSB7XG4gICAgICAgIFVJRF9tYXliZSA9IHByb21wdChcIkVudGVyIHlvdXIgdXNlciBpZC4gUGxlYXNlIGdldCBpbiB0b3VjaCBpZiB5b3Ugd2VyZSBub3QgYXNzaWduZWQgYW4gaWQgYnV0IHdpc2ggdG8gcGFydGljaXBhdGUgaW4gdGhpcyBleHBlcmltZW50LlwiKVxuICAgIH1cbiAgICBnbG9iYWxUaGlzLnVpZCA9IFVJRF9tYXliZSFcbn1cblxuXG5sZXQgaW50ZXJ2ZW50aW9uX2FsbG93ZWRfdGltZXN0ZXBzOiBudW1iZXJbXSA9IFtdXG5pZiAoZ2xvYmFsVGhpcy51aWQuaW5jbHVkZXMoXCIzNDNcIikpIHtcbiAgICBpbnRlcnZlbnRpb25fYWxsb3dlZF90aW1lc3RlcHMgPSBbNywgOCwgOSwgMTcsIDE4LCAxOSwgMjcsIDI4LCAyOV1cbn0gZWxzZSBpZiAoZ2xvYmFsVGhpcy51aWQuaW5jbHVkZXMoXCI0MzRcIikpIHtcbiAgICBpbnRlcnZlbnRpb25fYWxsb3dlZF90aW1lc3RlcHMgPSBbNywgOCwgOSwgMTcsIDE4LCAxOSwgMjcsIDI4LCAyOV1cbn0gZWxzZSBpZiAoZ2xvYmFsVGhpcy51aWQuaW5jbHVkZXMoXCI3MzVcIikpIHtcbiAgICBpbnRlcnZlbnRpb25fYWxsb3dlZF90aW1lc3RlcHMgPSBbMTAsIDExLCAxMiwgMTMsIDE0LCAyNSwgMjYsIDI3LCAyOCwgMjldXG59XG5cbi8vY29uc3QgdmFsaWRBSUludGVydmVudGlvbnMgPSBbXCJub25lXCIsIFwiZHVtbXlcIiwgXCJjb25maWRlbmNlX2luZmxhdGlvblwiLCBcImNvbmZpZGVuY2VfaW5mbGF0aW9uX2ZpeGVkXCIsIFwiY29uZmlkZW5jZV9kZWZsYXRpb25cIl1cbi8vbGV0IEFJSW50ZXJ2ZW50aW9uVHlwZSA9IHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fdHlwZVwiKVxuLy9sZXQgSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID0gTnVtYmVyKHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fdGhyZXNob2xkXCIpKVxuLy9sZXQgSW50ZXJ2ZW50aW9uRml4ZWRDb25mSW5jcmVhc2UgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl9maXhlZGNvbmZpbmNyZWFzZVwiKSlcbmNvbnN0IHZhbGlkSW50ZXJ2ZW50aW9uR29hbHMgPSBbXCJub25lXCIsIFwibWl0aWdhdGVfdW5kZXJ0cnVzdFwiLCBcIm1pdGlnYXRlX292ZXJ0cnVzdFwiXVxubGV0IEFJSW50ZXJ2ZW50aW9uR29hbCA9IHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fZ29hbFwiKVxuaWYgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBudWxsKSB7QUlJbnRlcnZlbnRpb25Hb2FsID0gXCJub25lXCJ9XG5pZiAoIXZhbGlkSW50ZXJ2ZW50aW9uR29hbHMuaW5jbHVkZXMoQUlJbnRlcnZlbnRpb25Hb2FsISkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEFJIEFzc2lzdGFuY2UgSW50ZXJ2ZW50aW9uIEdvYWw6IFwiICsgQUlJbnRlcnZlbnRpb25Hb2FsKVxufVxuXG5jb25zdCB2YWxpZEludGVydmVudGlvblR5cGVzID0gW1wibm9uZVwiLCBcImR1bW15XCIsIFwiY29uZmlkZW5jZV9tYW5pcFwiLCBcImFpX2V4cGxhbmF0aW9uXCIsIFwiYWlfY29udHJhc3RpdmVfZXhwbGFuYXRpb25cIl1cbmxldCBBSUludGVydmVudGlvblR5cGUgPSB1cmxQYXJhbXMuZ2V0KFwiaW50ZXJ2ZW50aW9uX3R5cGVcIilcbmlmIChBSUludGVydmVudGlvblR5cGUgPT0gbnVsbCkge0FJSW50ZXJ2ZW50aW9uVHlwZSA9IFwibm9uZVwifSBcbmlmICghdmFsaWRJbnRlcnZlbnRpb25UeXBlcy5pbmNsdWRlcyhBSUludGVydmVudGlvblR5cGUhKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQUkgQXNzaXN0YW5jZSBJbnRlcnZlbnRpb246IFwiICsgQUlJbnRlcnZlbnRpb25UeXBlKVxufVxuXG5jb25zdCB2YWxpZEludGVydmVudGlvblN0cmF0ZWdpZXMgPSBbXCJkdW1teVwiLCBcImZpeGVkXCIsIFwiYWRhcHRpdmVcIl1cbmxldCBBSUludGVydmVudGlvblN0cmF0ZWd5ID0gdXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl9zdHJhdGVneVwiKVxuaWYgKEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPT0gbnVsbCkge0FJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kgPSBcImR1bW15XCJ9XG5pZiAoIXZhbGlkSW50ZXJ2ZW50aW9uU3RyYXRlZ2llcy5pbmNsdWRlcyhBSUludGVydmVudGlvblN0cmF0ZWd5ISkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEFJIEFzc2lzdGFuY2UgSW50ZXJ2ZW50aW9uIFN0cmF0ZWd5OiBcIiArIEFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3kpXG59XG5cbi8vIEludGVydmVudGlvbi1zcGVjaWZpYyBwYXJhbWV0ZXJzXG5sZXQgSW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID0gTnVtYmVyKHVybFBhcmFtcy5nZXQoXCJpbnRlcnZlbnRpb25fdGhyZXNob2xkXCIpKVxuaWYgKEludGVydmVudGlvbkFMRGlmZlRocmVzaG9sZCA9PSBudWxsKSB7SW50ZXJ2ZW50aW9uQUxEaWZmVGhyZXNob2xkID0gLTF9XG5sZXQgSW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGQgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl90cnVzdF90aHJlc2hvbGRcIikpXG5pZiAoSW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGQgPT0gbnVsbCkge0ludGVydmVudGlvblRydXN0VGhyZXNob2xkID0gMH1cbmxldCBJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UgPSBOdW1iZXIodXJsUGFyYW1zLmdldChcImludGVydmVudGlvbl9maXhlZGNvbmZjaGFuZ2VcIikpXG5pZiAoSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlID09IG51bGwpIHtJbnRlcnZlbnRpb25GaXhlZENvbmZDaGFuZ2UgPSAwfVxuXG5sZXQgdXNlVXNlclJlcG9ydGVkVHJ1c3RWYWwgPSB1cmxQYXJhbXMuZ2V0KFwidXNlX3VzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWxcIikgPT0gXCJ0cnVlXCJcbmlmICh1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCA9PSBudWxsKSB7dXNlVXNlclJlcG9ydGVkVHJ1c3RWYWwgPSBmYWxzZX1cblxubGV0IHNraXBfdHJ1c3RfcmVwb3J0aW5nID0gdXJsUGFyYW1zLmdldChcInNraXBfdHJ1c3RfcmVwb3J0aW5nXCIpID09IFwidHJ1ZVwiXG5pZiAoc2tpcF90cnVzdF9yZXBvcnRpbmcgPT0gbnVsbCkge3NraXBfdHJ1c3RfcmVwb3J0aW5nID0gZmFsc2V9XG5cbmNvbnNvbGUubG9nKFwiQUlJbnRlcnZlbnRpb25Hb2FsOiBcIiwgQUlJbnRlcnZlbnRpb25Hb2FsKVxuY29uc29sZS5sb2coXCJBSUludGVydmVudGlvblR5cGU6IFwiLCBBSUludGVydmVudGlvblR5cGUpXG5jb25zb2xlLmxvZyhcIkFJSW50ZXJ2ZW50aW9uU3RyYXRlZ3k6IFwiLCBBSUludGVydmVudGlvblN0cmF0ZWd5KVxuY29uc29sZS5sb2coXCJJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQ6IFwiLCBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGQpXG5jb25zb2xlLmxvZyhcIkludGVydmVudGlvblRydXN0VGhyZXNob2xkOiBcIiwgSW50ZXJ2ZW50aW9uVHJ1c3RUaHJlc2hvbGQpXG5jb25zb2xlLmxvZyhcIkludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZTogXCIsIEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSlcbmNvbnNvbGUubG9nKFwidXNlVXNlclJlcG9ydGVkVHJ1c3RWYWw6IFwiLCB1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbClcbmNvbnNvbGUubG9nKFwic2tpcF90cnVzdF9yZXBvcnRpbmc6IFwiLCBza2lwX3RydXN0X3JlcG9ydGluZylcblxuaWYgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX3VuZGVydHJ1c3RcIikge1xuICAgIGFzc2VydChJbnRlcnZlbnRpb25UcnVzdFRocmVzaG9sZCA8PSAwLCBcIlRydXN0IHRocmVzaG9sZCBmb3IgbWl0aWdhdGluZyB1bmRlcnRydXN0IGNhbm5vdCBiZSBwb3NpdGl2ZS5cIilcbiAgICBhc3NlcnQoSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlID49IDAsIFwiQ29uZmlkZW5jZSBjaGFuZ2UgZm9yIG1pdGlnYXRpbmcgdW5kZXJ0cnVzdCBjYW5ub3QgYmUgbmVnYXRpdmUuXCIpXG59IGVsc2UgaWYgKEFJSW50ZXJ2ZW50aW9uR29hbCA9PSBcIm1pdGlnYXRlX292ZXJ0cnVzdFwiKSB7XG4gICAgYXNzZXJ0KEludGVydmVudGlvblRydXN0VGhyZXNob2xkID49IDAsIFwiVHJ1c3QgdGhyZXNob2xkIGZvciBtaXRpZ2F0aW5nIG92ZXJ0cnVzdCBjYW5ub3QgYmUgbmVnYXRpdmUuXCIpXG4gICAgYXNzZXJ0KEludGVydmVudGlvbkZpeGVkQ29uZkNoYW5nZSA8PSAwLCBcIkNvbmZpZGVuY2UgY2hhbmdlIGZvciBtaXRpZ2F0aW5nIG92ZXJ0cnVzdCBjYW5ub3QgYmUgcG9zaXRpdmUuXCIpXG59XG5cbmdsb2JhbFRoaXMudXJsX2RhdGFbXCJpbnRlcnZlbnRpb25fZ29hbFwiXSA9IEFJSW50ZXJ2ZW50aW9uR29hbFxuZ2xvYmFsVGhpcy51cmxfZGF0YVtcImludGVydmVudGlvbl90eXBlXCJdID0gQUlJbnRlcnZlbnRpb25UeXBlXG5nbG9iYWxUaGlzLnVybF9kYXRhW1wiaW50ZXJ2ZW50aW9uX3N0cmF0ZWd5XCJdID0gQUlJbnRlcnZlbnRpb25TdHJhdGVneVxuZ2xvYmFsVGhpcy51cmxfZGF0YVtcImludGVydmVudGlvbl90aHJlc2hvbGRcIl0gPSBJbnRlcnZlbnRpb25BTERpZmZUaHJlc2hvbGRcbmdsb2JhbFRoaXMudXJsX2RhdGFbXCJpbnRlcnZlbnRpb25fZml4ZWRjb25mY2hhbmdlXCJdID0gSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlXG5nbG9iYWxUaGlzLnVybF9kYXRhW1widXNlX3VzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWxcIl0gPSB1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbFxuXG4vLyB2ZXJzaW9uIGZvciBwYXBlclxuaWYgKGdsb2JhbFRoaXMudWlkLnN0YXJ0c1dpdGgoXCJkZW1vX3BhcGVyXCIpKSB7XG4gICAgTU9DS01PREUgPSB0cnVlXG59IGVsc2Uge1xuXG59XG5jb25zb2xlLmxvZyhcIlJ1bm5pbmcgd2l0aCBVSURcIiwgZ2xvYmFsVGhpcy51aWQpXG5sb2FkX2RhdGEoKS5jYXRjaCgoX2Vycm9yKSA9PiB7XG4gICAgLy9hbGVydChcIkludmFsaWQgdXNlciBpZC5cIilcbiAgICBjb25zb2xlLmxvZyhcIkludmFsaWQgdXNlciBpZC5cIilcbiAgICBjb25zb2xlLmxvZyhnbG9iYWxUaGlzLnVpZCEpXG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG59XG4pLnRoZW4oKG5ld19kYXRhKSA9PiB7XG4gICAgZGF0YSA9IG5ld19kYXRhXG4gICAgaWYgKHN0YXJ0T3ZlcnJpZGUgIT0gbnVsbCkge1xuICAgICAgICBxdWVzdGlvbl9pID0gcGFyc2VJbnQoc3RhcnRPdmVycmlkZSkgLSAxXG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgZnJvbVwiLCBxdWVzdGlvbl9pKVxuICAgIH1cbiAgICAvLyBuZXh0X3F1ZXN0aW9uKClcbiAgICBuZXh0X2luc3RydWN0aW9ucygwKVxuICAgICQoXCIjbWFpbl9ib3hfaW5zdHJ1Y3Rpb25zXCIpLnNob3coKVxuICAgICQoXCIjaW5zdHJ1Y3Rpb25zX2FuZF9kZWNvcmF0aW9uc1wiKS5oaWRlKClcbn0pXG5cbmNvbnNvbGUubG9nKFwiU3RhcnRpbmcgc2Vzc2lvbiB3aXRoIFVJRDpcIiwgZ2xvYmFsVGhpcy51aWQhKVxuXG5sZXQgYWxlcnRfYWN0aXZlID0gZmFsc2VcbmRvY3VtZW50Lm9udmlzaWJpbGl0eWNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoIWFsZXJ0X2FjdGl2ZSkge1xuICAgICAgICBjb3VudF9leGl0ZWRfcGFnZSArPSAxXG4gICAgICAgIGFsZXJ0X2FjdGl2ZSA9IHRydWVcbiAgICAgICAgaWYgKCEoZ2xvYmFsVGhpcy51aWQhLnN0YXJ0c1dpdGgoXCJkZW1vXCIpKSAmJiAhKERFVk1PREUpKSB7XG4gICAgICAgICAgICBhbGVydChcIlBsZWFzZSBkb24ndCBsZWF2ZSB0aGUgcGFnZS4gSWYgeW91IGRvIHNvIGFnYWluLCB3ZSBtYXkgcmVzdHJpY3QgcGF5aW5nIHlvdS5cIilcbiAgICAgICAgfVxuICAgICAgICBhbGVydF9hY3RpdmUgPSBmYWxzZVxuICAgIH1cbn0iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTRVJWRVJfTE9HX1JPT1QiLCJhY3RpdmVUaW1lciIsInN0YXJ0VGltZXIiLCJkdXJhdGlvbiIsInN0ZXBEaXYiLCJidXR0b25zIiwiY2FsbGJhY2siLCJtZXNzYWdlIiwiY2xlYXJJbnRlcnZhbCIsImZvckVhY2giLCJidXR0b24iLCJzZXRBdHRyaWJ1dGUiLCJ0aW1lckRpc3BsYXkiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInN0eWxlIiwiZm9udFdlaWdodCIsIm1hcmdpblRvcCIsImFwcGVuZENoaWxkIiwicmVtYWluaW5nVGltZSIsInRleHRDb250ZW50Iiwic2V0SW50ZXJ2YWwiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUF0dHJpYnV0ZSIsIk1PQ0tNT0RFIiwiZGF0YSIsInRpbWVfcXVlc3Rpb25fc3RhcnQiLCJ0aW1lX2ZpbmFsX2RlY2lzaW9uX3N0YXJ0IiwidGltZV90cnVzdF9kZWNpc2lvbl9zdGFydCIsInRpbWVfaW5pdGlhbF9jb25maWRlbmNlX3N0YXJ0IiwidGltZV9maW5hbF9jb25maWRlbmNlX3N0YXJ0IiwicXVlc3Rpb25faSIsInF1ZXN0aW9uIiwiaW5pdGlhbF91c2VyX2RlY2lzaW9uIiwiZmluYWxfdXNlcl9kZWNpc2lvbiIsImluaXRpYWxfdXNlcl9jb25maWRlbmNlIiwiZmluYWxfdXNlcl9jb25maWRlbmNlIiwiYmFsYW5jZSIsInVzZXJfcmVwb3J0ZWRfdHJ1c3RfbGV2ZWwiLCJiZXRfdmFsX3JhdGlvIiwiaW5zdHJ1Y3Rpb25faSIsImNvdW50X2V4aXRlZF9wYWdlIiwidXNlcl9jdXJyZW50X2VzdGltYXRlZF90cnVzdF9sZXZlbCIsImFpX2Fzc2lzdGFuY2VfaW50ZXJ2ZW50aW9uX2RhdGEiLCJpbnRlcnZlbnRpb25fZGV0YWlscyIsInRydXN0X2VmZmVjdF9wcmVkaWN0aW9uX2RhdGEiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJuZXh0X2luc3RydWN0aW9ucyIsImluY3JlbWVudCIsIiQiLCJhdHRyIiwicmVtb3ZlQXR0ciIsInNob3ciLCJ2YWwiLCJoaWRlIiwibmV4dF9xdWVzdGlvbiIsImNoaWxkcmVuIiwiZWFjaCIsIl8iLCJlbCIsIm1ha2VfaW5pdGlhbF91c2VyX2RlY2lzaW9uIiwib3B0aW9uIiwiRGF0ZSIsIm5vdyIsImkiLCJjb25zb2xlIiwibG9nIiwiZ2V0X2luaXRpYWxfdXNlcl9jb25maWRlbmNlIiwiY29uZl9sZXZlbCIsImFzeW5jIiwiZGlzcGxheWVkX2FpX2NvbmZpZGVuY2UiLCJ1c2VyX2N1cnJlbnRfdHJ1c3RfbGV2ZWwiLCJ1c2VVc2VyUmVwb3J0ZWRUcnVzdFZhbCIsIkFJSW50ZXJ2ZW50aW9uVHlwZSIsIkFJSW50ZXJ2ZW50aW9uR29hbCIsIkludGVydmVudGlvblRydXN0VGhyZXNob2xkIiwiQUlJbnRlcnZlbnRpb25TdHJhdGVneSIsImFpX2NvbmZpZGVuY2UiLCJOdW1iZXIiLCJyZXBsYWNlIiwibmV3X2NvbmZpZGVuY2UiLCJNYXRoIiwibWluIiwiSW50ZXJ2ZW50aW9uRml4ZWRDb25mQ2hhbmdlIiwibWF4IiwiU3RyaW5nIiwidG9GaXhlZCIsImNvbmZpZGVuY2VfY2hhbmdlIiwiZXhwbGFuYXRpb25fc2hvd24iLCJodG1sIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRfYWlfYXNzaXN0YW5jZSIsIm1ha2VfZmluYWxfdXNlcl9kZWNpc2lvbiIsImdldF9maW5hbF91c2VyX2NvbmZpZGVuY2UiLCJjb3JyZWN0X29wdGlvbiIsImNvcnJlY3Rfb3B0aW9uX3N0ciIsInVzZXJfaXNfY29ycmVjdCIsImFpX2lzX2NvcnJlY3QiLCJ0ZXh0IiwicmVzdWx0IiwidHJ1c3RfZWZmZWN0X2lucHV0cyIsImFqYXgiLCJVU0VSX01PREVMU19ST09UIiwiSlNPTiIsInN0cmluZ2lmeSIsInByb2plY3QiLCJtb2RlbF9uYW1lIiwicGF5bG9hZCIsInR5cGUiLCJjb250ZW50VHlwZSIsImUiLCJ0cnVzdF9lZmZlY3QiLCJnZXRfdHJ1c3RfZWZmZWN0Iiwic2hvd19yZXN1bHQiLCJsZW5ndGgiLCJyYXRpbzEiLCJyYXRpbzIiLCJvbiIsImxvZ2dlZF9kYXRhIiwiZ2xvYmFsVGhpcyIsInVybF9kYXRhIiwidWlkIiwibG9nX2RhdGEiLCJ0aGlzIiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdGFydE92ZXJyaWRlIiwiVUlERnJvbVVSTCIsImVudHJpZXMiLCJ2YWx1ZSIsInBhcmFtc1RvT2JqZWN0IiwicXVldWVfaWQiLCJmbG9vciIsInJhbmRvbSIsInBhZFN0YXJ0IiwiVUlEX21heWJlIiwicHJvbXB0IiwiaW50ZXJ2ZW50aW9uX2FsbG93ZWRfdGltZXN0ZXBzIiwiaW5jbHVkZXMiLCJFcnJvciIsIkludGVydmVudGlvbkFMRGlmZlRocmVzaG9sZCIsInNraXBfdHJ1c3RfcmVwb3J0aW5nIiwic3RhcnRzV2l0aCIsImdldEpTT04iLCJsb2FkX2RhdGEiLCJjYXRjaCIsIl9lcnJvciIsInJlbG9hZCIsInRoZW4iLCJuZXdfZGF0YSIsInBhcnNlSW50IiwiYWxlcnRfYWN0aXZlIiwib252aXNpYmlsaXR5Y2hhbmdlIiwiYWxlcnQiXSwic291cmNlUm9vdCI6IiJ9